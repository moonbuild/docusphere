"use strict";(self.webpackChunkapp_try=self.webpackChunkapp_try||[]).push([[6932],{58160:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"backend/pytest/code-workspace","title":"Code Workspace","description":"Code Overview: Testing an API with pytest and FastAPI","source":"@site/docs/backend/pytest/code-workspace.md","sourceDirName":"backend/pytest","slug":"/backend/pytest/code-workspace","permalink":"/docs/backend/pytest/code-workspace","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"title":"Code Workspace","displayed-sidebar":"backend","sidebar_position":4},"sidebar":"backend","previous":{"title":"Pytest Syntax","permalink":"/docs/backend/pytest/code-syntax"},"next":{"title":"References","permalink":"/docs/backend/pytest/references"}}');var r=s(74848),i=s(28453);const a={title:"Code Workspace","displayed-sidebar":"backend",sidebar_position:4},o=void 0,d={},c=[{value:"<strong>Code Overview: Testing an API with <code>pytest</code> and <code>FastAPI</code></strong>",id:"code-overview-testing-an-api-with-pytest-and-fastapi",level:3},{value:"<strong>Purpose</strong>",id:"purpose",level:3},{value:"<strong>Key Components</strong>",id:"key-components",level:3},{value:"1. <strong>conftest</strong>",id:"1-conftest",level:4},{value:"2. <strong>Imports</strong>",id:"2-imports",level:4},{value:"<strong>Test Functions</strong>",id:"test-functions",level:3},{value:"<strong>1. Registering a User</strong>",id:"1-registering-a-user",level:4},{value:"<strong>2. Login and Token Generation</strong>",id:"2-login-and-token-generation",level:4},{value:"<strong>3. Token Refresh</strong>",id:"3-token-refresh",level:4},{value:"<strong>4. Creating a Note</strong>",id:"4-creating-a-note",level:4},{value:"<strong>5. Fetching All Notes</strong>",id:"5-fetching-all-notes",level:4},{value:"<strong>6. Fetching a Specific Note</strong>",id:"6-fetching-a-specific-note",level:4},{value:"<strong>7. Updating a Note</strong>",id:"7-updating-a-note",level:4},{value:"<strong>8. Deleting a Note</strong>",id:"8-deleting-a-note",level:4},{value:"<strong>Entry Point</strong>",id:"entry-point",level:3},{value:"<strong>Output</strong>",id:"output",level:3}];function l(e){const n={a:"a",code:"code",h3:"h3",h4:"h4",hr:"hr",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h3,{id:"code-overview-testing-an-api-with-pytest-and-fastapi",children:(0,r.jsxs)(n.strong,{children:["Code Overview: Testing an API with ",(0,r.jsx)(n.code,{children:"pytest"})," and ",(0,r.jsx)(n.code,{children:"FastAPI"})]})}),"\n",(0,r.jsxs)(n.p,{children:["This Python script demonstrates how to write integration tests for a RESTful API using the ",(0,r.jsx)(n.code,{children:"pytest"})," framework and ",(0,r.jsx)(n.code,{children:"FastAPI"}),". It provides a comprehensive example of testing user registration, authentication (login), token refreshing, and CRUD operations on notes."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://github.com/CGS26/Notes_app/tree/main/Backend/tests/pytest",children:(0,r.jsx)(n.img,{src:"https://img.shields.io/badge/GitHub-Refer%20to%20Repo%20for%20Details-blue?logo=github",alt:"Refer to Repo for Details"})})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"purpose",children:(0,r.jsx)(n.strong,{children:"Purpose"})}),"\n",(0,r.jsxs)(n.p,{children:["The purpose of these tests is to validate the functionality of the ",(0,r.jsx)(n.strong,{children:"Notes App API"})," by simulating HTTP requests using the ",(0,r.jsx)(n.code,{children:"pytest"})," library and verifying the responses. These tests cover:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Registering a new user."}),"\n",(0,r.jsx)(n.li,{children:"Logging in and generating access/refresh tokens."}),"\n",(0,r.jsx)(n.li,{children:"Refreshing an access token."}),"\n",(0,r.jsx)(n.li,{children:"Creating a new note."}),"\n",(0,r.jsx)(n.li,{children:"Fetching all notes for a user."}),"\n",(0,r.jsx)(n.li,{children:"Fetching a Specific Note."}),"\n",(0,r.jsx)(n.li,{children:"Updating a note."}),"\n",(0,r.jsx)(n.li,{children:"Deleting a note."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Each test ensures that the API adheres to expected behavior, including proper status codes, response data, and database interactions."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"key-components",children:(0,r.jsx)(n.strong,{children:"Key Components"})}),"\n",(0,r.jsxs)(n.h4,{id:"1-conftest",children:["1. ",(0,r.jsx)(n.strong,{children:"conftest"})]}),"\n",(0,r.jsx)(n.p,{children:"configuration file for running pytest."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'import pytest\nimport pytest_asyncio\nfrom sqlalchemy.ext.asyncio import AsyncSession, create_async_engine, async_sessionmaker\nfrom sqlalchemy.orm import sessionmaker\nfrom fastapi.testclient import TestClient\nfrom dao.note_dao import NoteDAO\nfrom dao.user_dao import UserDAO\nfrom models.model import Base, User \nfrom main import app  \nfrom db.database import get_db  \n\n\nTEST_DATABASE_URL = "sqlite+aiosqlite:///:memory:"\n\n@pytest_asyncio.fixture(scope="function")\nasync def override_get_db():\n    """Fixture to provide a fresh test database session per test."""\n    engine = create_async_engine(TEST_DATABASE_URL, echo=True)\n    TestingSessionLocal = async_sessionmaker(\n        bind=engine, class_=AsyncSession, expire_on_commit=False\n    )\n\n    async with engine.begin() as conn:\n        await conn.run_sync(Base.metadata.create_all)\n\n    async with TestingSessionLocal() as session:\n        yield session\n\n    async with engine.begin() as conn:\n        await conn.run_sync(Base.metadata.drop_all)\n\n\n@pytest.fixture\ndef setup_db(override_get_db):\n    """Fixture to override the get_db dependency for FastAPI."""\n    app.dependency_overrides[get_db] = lambda: override_get_db\n    with TestClient(app) as client:\n        yield client  \n\n\n@pytest_asyncio.fixture\nasync def user_dao(override_get_db):\n    """Fixture to provide a UserDAO instance with a test database session."""\n    return UserDAO(db=override_get_db)\n\n@pytest_asyncio.fixture\nasync def note_dao(override_get_db):\n    """Fixture to provide a NoteDAO instance with a test database session."""\n    return NoteDAO(db=override_get_db)\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h4,{id:"2-imports",children:["2. ",(0,r.jsx)(n.strong,{children:"Imports"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import pytest\nfrom fastapi.testclient import TestClient\nfrom schemas.user import UserCreateDTO, RefreshTokenDTO\nfrom schemas.note import NoteCreateDTO\nfrom main import app  \n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"pytest"})}),": A powerful testing framework for Python."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:[(0,r.jsx)(n.code,{children:"TestClient"})," from FastAPI"]}),": Simulates HTTP requests to the API without requiring a running server."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:[(0,r.jsx)(n.code,{children:"UserCreateDTO"}),", ",(0,r.jsx)(n.code,{children:"RefreshTokenDTO"}),", ",(0,r.jsx)(n.code,{children:"NoteCreateDTO"})]}),": Pydantic models used for validating request payloads."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"app"})}),": The FastAPI application instance."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"test-functions",children:(0,r.jsx)(n.strong,{children:"Test Functions"})}),"\n",(0,r.jsx)(n.h4,{id:"1-registering-a-user",children:(0,r.jsx)(n.strong,{children:"1. Registering a User"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'@pytest.mark.asyncio\nasync def test_register_user(setup_db: TestClient, user_dao):\n    """Test registering a new user."""\n    user_data = UserCreateDTO(username="testuser", password="testpassword", full_name="Test User")\n    response = setup_db.post("/register/", json=user_data.dict())\n    assert response.status_code == 200\n    assert response.json() == {"message": "User created successfully"}\n    user = await user_dao.get_user_by_username("testuser")\n    assert user is not None\n    assert user.username == "testuser"\n    assert user.full_name == "Test User"\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Purpose"}),": Validates the registration of a new user via a ",(0,r.jsx)(n.code,{children:"POST"})," request."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Key Steps"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Send a ",(0,r.jsx)(n.code,{children:"POST"})," request to ",(0,r.jsx)(n.code,{children:"/register/"})," with valid user data (username, password, and full name)."]}),"\n",(0,r.jsxs)(n.li,{children:["Verify that the response status code is ",(0,r.jsx)(n.code,{children:"200 OK"})," and the response message confirms successful user creation (",(0,r.jsx)(n.code,{children:'{"message": "User created successfully"}'}),")."]}),"\n",(0,r.jsxs)(n.li,{children:["Query the database using the ",(0,r.jsx)(n.code,{children:"user_dao"})," fixture to retrieve the newly registered user by their username."]}),"\n",(0,r.jsx)(n.li,{children:"Validate that the user exists in the database and that their details (username and full name) match the input data."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"2-login-and-token-generation",children:(0,r.jsx)(n.strong,{children:"2. Login and Token Generation"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'@pytest.mark.asyncio\nasync def test_login_and_get_tokens(setup_db: TestClient, authenticated_user):\n    """Test logging in and retrieving access and refresh tokens."""\n    response = setup_db.post(\n        "/token/",\n        data={"username": authenticated_user["user"]["username"], "password": "testpassword"}\n    )\n    assert response.status_code == 200\n    tokens = response.json()\n    assert "access_token" in tokens\n    assert "refresh_token" in tokens\n    assert tokens["token_type"] == "bearer"\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Purpose"}),": Validates the login process and retrieval of access and refresh tokens."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Key Steps"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Send a ",(0,r.jsx)(n.code,{children:"POST"})," request to ",(0,r.jsx)(n.code,{children:"/token/"})," with valid credentials."]}),"\n",(0,r.jsxs)(n.li,{children:["Verify that the response contains both ",(0,r.jsx)(n.code,{children:"access_token"})," and ",(0,r.jsx)(n.code,{children:"refresh_token"}),", and that the token type is ",(0,r.jsx)(n.code,{children:"bearer"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"3-token-refresh",children:(0,r.jsx)(n.strong,{children:"3. Token Refresh"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'@pytest.mark.asyncio\nasync def test_refresh_access_token(setup_db: TestClient, authenticated_user):\n    """Test refreshing the access token using a refresh token."""\n    tokens = await test_login_and_get_tokens(setup_db, authenticated_user)\n    response = setup_db.post(\n        "/refresh/",\n        json=RefreshTokenDTO(refresh_token=tokens["refresh_token"]).dict()\n    )\n    assert response.status_code == 200\n    new_tokens = response.json()\n    assert "access_token" in new_tokens\n    assert new_tokens["token_type"] == "bearer"\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Purpose"}),": Validates the ability to refresh an access token using a refresh token."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Key Steps"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Use the ",(0,r.jsx)(n.code,{children:"refresh_token"})," obtained during login to send a ",(0,r.jsx)(n.code,{children:"POST"})," request to ",(0,r.jsx)(n.code,{children:"/refresh/"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Verify that the response contains a new ",(0,r.jsx)(n.code,{children:"access_token"})," and that the token type is ",(0,r.jsx)(n.code,{children:"bearer"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"4-creating-a-note",children:(0,r.jsx)(n.strong,{children:"4. Creating a Note"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'@pytest.mark.asyncio\nasync def test_create_note(setup_db: TestClient, authenticated_user, note_dao):\n    """Test creating a new note."""\n    note_data = NoteCreateDTO(title="Test Note", body="This is a test note.")\n    response = setup_db.post(\n        "/note/",\n        json=note_data.dict(),\n        headers={"Authorization": f"Bearer {authenticated_user[\'access_token\']}"}\n    )\n    assert response.status_code == 200\n    response_data = response.json()\n    assert response_data["title"] == note_data.title\n    assert response_data["body"] == note_data.body\n    assert response_data["user_id"] == authenticated_user["user"].id\n    note = await note_dao.get_note_by_id(response_data["note_id"])\n    assert note is not None\n    assert note.title == note_data.title\n    assert note.body == note_data.body\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Purpose"}),": Validates the creation of a new note via a ",(0,r.jsx)(n.code,{children:"POST"})," request."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Key Steps"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Send a ",(0,r.jsx)(n.code,{children:"POST"})," request with valid data and authentication headers."]}),"\n",(0,r.jsx)(n.li,{children:"Verify the response status code and payload."}),"\n",(0,r.jsx)(n.li,{children:"Check the database to ensure the note was created."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"5-fetching-all-notes",children:(0,r.jsx)(n.strong,{children:"5. Fetching All Notes"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'@pytest.mark.asyncio\nasync def test_get_notes(setup_db: TestClient, authenticated_user, note_dao):\n    """Test fetching all notes for the current user."""\n    note1 = await note_dao.create_note(title="Note 1", body="Body 1", user_id=authenticated_user["user"].id)\n    note2 = await note_dao.create_note(title="Note 2", body="Body 2", user_id=authenticated_user["user"].id)\n    response = setup_db.get(\n        "/note/all",\n        headers={"Authorization": f"Bearer {authenticated_user[\'access_token\']}"}\n    )\n    assert response.status_code == 200\n    response_data = response.json()\n    assert len(response_data) == 2\n    assert response_data[0]["title"] == "Note 1"\n    assert response_data[1]["title"] == "Note 2"\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Purpose"}),": Validates fetching all notes for an authenticated user via a ",(0,r.jsx)(n.code,{children:"GET"})," request."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Key Steps"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Create two notes in the database."}),"\n",(0,r.jsxs)(n.li,{children:["Send a ",(0,r.jsx)(n.code,{children:"GET"})," request to fetch all notes."]}),"\n",(0,r.jsx)(n.li,{children:"Verify the response contains the correct number of notes and their details."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"6-fetching-a-specific-note",children:(0,r.jsx)(n.strong,{children:"6. Fetching a Specific Note"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'@pytest.mark.asyncio\nasync def test_get_note_by_id(setup_db: TestClient, authenticated_user, note_dao):\n    """Test fetching a note by its ID."""\n    note = await note_dao.create_note(title="Test Note", body="This is a test note.", user_id=authenticated_user["user"].id)\n    response = setup_db.get(\n        f"/note/{note.note_id}",\n        headers={"Authorization": f"Bearer {authenticated_user[\'access_token\']}"}\n    )\n    assert response.status_code == 200\n    response_data = response.json()\n    assert response_data["title"] == "Test Note"\n    assert response_data["body"] == "This is a test note."\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Purpose"}),": Validates fetching a specific note by its ID via a ",(0,r.jsx)(n.code,{children:"GET"})," request."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Key Steps"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Create a note in the database."}),"\n",(0,r.jsxs)(n.li,{children:["Send a ",(0,r.jsx)(n.code,{children:"GET"})," request with the note's ID."]}),"\n",(0,r.jsx)(n.li,{children:"Verify the response contains the correct note details."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"7-updating-a-note",children:(0,r.jsx)(n.strong,{children:"7. Updating a Note"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'@pytest.mark.asyncio\nasync def test_update_note(setup_db: TestClient, authenticated_user, note_dao):\n    """Test updating a note."""\n    note = await note_dao.create_note(title="Test Note", body="This is a test note.", user_id=authenticated_user["user"].id)\n    updated_note_data = NoteCreateDTO(title="Updated Title", body="Updated Body")\n    response = setup_db.put(\n        f"/note/{note.note_id}",\n        json=updated_note_data.dict(),\n        headers={"Authorization": f"Bearer {authenticated_user[\'access_token\']}"}\n    )\n    assert response.status_code == 200\n    response_data = response.json()\n    assert response_data["title"] == updated_note_data.title\n    assert response_data["body"] == updated_note_data.body\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Purpose"}),": Validates updating an existing note via a ",(0,r.jsx)(n.code,{children:"PUT"})," request."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Key Steps"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Create a note in the database."}),"\n",(0,r.jsxs)(n.li,{children:["Send a ",(0,r.jsx)(n.code,{children:"PUT"})," request with updated data."]}),"\n",(0,r.jsx)(n.li,{children:"Verify the response reflects the updated details."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"8-deleting-a-note",children:(0,r.jsx)(n.strong,{children:"8. Deleting a Note"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'@pytest.mark.asyncio\nasync def test_delete_note(setup_db: TestClient, authenticated_user, note_dao):\n    """Test deleting a note."""\n    note = await note_dao.create_note(title="Test Note", body="This is a test note.", user_id=authenticated_user["user"].id)\n    response = setup_db.delete(\n        f"/note/{note.note_id}",\n        headers={"Authorization": f"Bearer {authenticated_user[\'access_token\']}"}\n    )\n    assert response.status_code == 204\n    deleted_note = await note_dao.get_note_by_id(note.note_id)\n    assert deleted_note is None\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Purpose"}),": Validates deleting a note via a ",(0,r.jsx)(n.code,{children:"DELETE"})," request."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Key Steps"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Create a note in the database."}),"\n",(0,r.jsxs)(n.li,{children:["Send a ",(0,r.jsx)(n.code,{children:"DELETE"})," request with the note's ID."]}),"\n",(0,r.jsx)(n.li,{children:"Verify the response status code and that the note no longer exists in the database."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"entry-point",children:(0,r.jsx)(n.strong,{children:"Entry Point"})}),"\n",(0,r.jsx)(n.p,{children:"To run the tests, use the following command:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"pytest -v\n\n"})}),"\n",(0,r.jsx)(n.h3,{id:"output",children:(0,r.jsx)(n.strong,{children:"Output"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"alt text",src:s(94964).A+"",width:"1274",height:"732"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},94964:(e,n,s)=>{s.d(n,{A:()=>t});const t=s.p+"assets/images/20250205-1401-36.3778064-96c2a54d52e057b57d082d086c0ea363.gif"},28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>o});var t=s(96540);const r={},i=t.createContext(r);function a(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);