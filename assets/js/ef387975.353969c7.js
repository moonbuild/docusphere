"use strict";(self.webpackChunkapp_try=self.webpackChunkapp_try||[]).push([[3951],{45824:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"frontend/React-Testing-Library/matcher-jsdom","title":"Matchers in React Testing  ","description":"Learn how to use custom matchers like `toBeInTheDocument` from @testing-library/jest-dom to improve your Jest and Vitest tests.","source":"@site/docs/frontend/3. React-Testing-Library/matcher-jsdom.md","sourceDirName":"frontend/3. React-Testing-Library","slug":"/frontend/react-testing-library/matcher-jest-dom","permalink":"/docs/frontend/react-testing-library/matcher-jest-dom","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"title":"Matchers in React Testing  ","description":"Learn how to use custom matchers like `toBeInTheDocument` from @testing-library/jest-dom to improve your Jest and Vitest tests.","displayed-sidebar":"frontend","sidebar_position":5,"slug":"/frontend/react-testing-library/matcher-jest-dom","authors":["tanishq"]},"sidebar":"frontend","previous":{"title":"Understanding the screen  Object in React Testing","permalink":"/docs/frontend/react-testing-library/screen Object"},"next":{"title":"General Overview","permalink":"/docs/backend/jester"}}');var r=n(74848),i=n(28453);const o={title:"Matchers in React Testing  ",description:"Learn how to use custom matchers like `toBeInTheDocument` from @testing-library/jest-dom to improve your Jest and Vitest tests.","displayed-sidebar":"frontend",sidebar_position:5,slug:"/frontend/react-testing-library/matcher-jest-dom",authors:["tanishq"]},c=void 0,a={},l=[{value:"<code>toBeInTheDocument</code> Matcher",id:"tobeinthedocument-matcher",level:2},{value:"Purpose",id:"purpose",level:3},{value:"Usage",id:"usage",level:3},{value:"How <code>toBeInTheDocument</code> Works",id:"how-tobeinthedocument-works",level:2},{value:"Other Useful Matchers from <code>@testing-library/jest-dom</code>",id:"other-useful-matchers-from-testing-libraryjest-dom",level:2},{value:"1. <code>toHaveTextContent</code>",id:"1-tohavetextcontent",level:3},{value:"2. <code>toContainHTML</code>",id:"2-tocontainhtml",level:3},{value:"3. <code>toHaveClass</code>",id:"3-tohaveclass",level:3},{value:"4. <code>toHaveAttribute</code>",id:"4-tohaveattribute",level:3},{value:"5. <code>toHaveStyle</code>",id:"5-tohavestyle",level:3},{value:"6. <code>toHaveFocus</code>",id:"6-tohavefocus",level:3},{value:"7. <code>toBeVisible</code>",id:"7-tobevisible",level:3},{value:"8. <code>toBeEmptyDOMElement</code>",id:"8-tobeemptydomelement",level:3},{value:"9. <code>toBeDisabled</code>",id:"9-tobedisabled",level:3},{value:"10. <code>toBeRequired</code>",id:"10-toberequired",level:3}];function d(e){const t={code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:["When testing React components, it\u2019s crucial to have expressive assertions that make tests more readable and maintainable. The ",(0,r.jsx)(t.code,{children:"@testing-library/jest-dom"})," library extends Jest and Vitest with custom matchers specifically designed for DOM testing. One such matcher is ",(0,r.jsx)(t.code,{children:"toBeInTheDocument"}),", which verifies if an element is present in the rendered output."]}),"\n",(0,r.jsxs)(t.h2,{id:"tobeinthedocument-matcher",children:[(0,r.jsx)(t.code,{children:"toBeInTheDocument"})," Matcher"]}),"\n",(0,r.jsx)(t.h3,{id:"purpose",children:"Purpose"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"toBeInTheDocument"})," matcher checks whether a given element exists in the DOM. It is useful for ensuring that a component has been rendered properly."]}),"\n",(0,r.jsx)(t.h3,{id:"usage",children:"Usage"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"import { render, screen } from '@testing-library/react';\nimport '@testing-library/jest-dom/vitest'; // Extends Jest/Vitest with custom matchers\nimport { describe, it, expect } from 'vitest';\nimport MyComponent from './MyComponent';\n\ndescribe('MyComponent', () => {\n  it('renders a specific element', () => {\n    render(<MyComponent />);\n    const element = screen.getByText('Hello, World!');\n    expect(element).toBeInTheDocument();\n  });\n});\n"})}),"\n",(0,r.jsxs)(t.h2,{id:"how-tobeinthedocument-works",children:["How ",(0,r.jsx)(t.code,{children:"toBeInTheDocument"})," Works"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsxs)(t.strong,{children:["Relies on ",(0,r.jsx)(t.code,{children:"jsdom"})]}),": Jest and Vitest use ",(0,r.jsx)(t.code,{children:"jsdom"})," to simulate a browser environment in Node.js, making DOM-related assertions possible."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsxs)(t.strong,{children:["Part of ",(0,r.jsx)(t.code,{children:"@testing-library/jest-dom"})]}),": This library provides a set of matchers that enhance Jest/Vitest, making tests more expressive and readable."]}),"\n"]}),"\n",(0,r.jsxs)(t.h2,{id:"other-useful-matchers-from-testing-libraryjest-dom",children:["Other Useful Matchers from ",(0,r.jsx)(t.code,{children:"@testing-library/jest-dom"})]}),"\n",(0,r.jsxs)(t.h3,{id:"1-tohavetextcontent",children:["1. ",(0,r.jsx)(t.code,{children:"toHaveTextContent"})]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Purpose"}),": Checks if an element contains specific text content."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"expect(element).toHaveTextContent('Hello, World!');\n"})}),"\n",(0,r.jsxs)(t.h3,{id:"2-tocontainhtml",children:["2. ",(0,r.jsx)(t.code,{children:"toContainHTML"})]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Purpose"}),": Checks if an element contains specific HTML."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"expect(element).toContainHTML('<span>Hello</span>');\n"})}),"\n",(0,r.jsxs)(t.h3,{id:"3-tohaveclass",children:["3. ",(0,r.jsx)(t.code,{children:"toHaveClass"})]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Purpose"}),": Verifies if an element has a specific CSS class."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"expect(element).toHaveClass('active');\n"})}),"\n",(0,r.jsxs)(t.h3,{id:"4-tohaveattribute",children:["4. ",(0,r.jsx)(t.code,{children:"toHaveAttribute"})]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Purpose"}),": Ensures an element has a given attribute with a specific value."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"expect(element).toHaveAttribute('data-testid', 'custom-element');\n"})}),"\n",(0,r.jsxs)(t.h3,{id:"5-tohavestyle",children:["5. ",(0,r.jsx)(t.code,{children:"toHaveStyle"})]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Purpose"}),": Checks if an element has a specific inline style."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"expect(element).toHaveStyle('color: red');\n"})}),"\n",(0,r.jsxs)(t.h3,{id:"6-tohavefocus",children:["6. ",(0,r.jsx)(t.code,{children:"toHaveFocus"})]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Purpose"}),": Verifies if an element is currently focused."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"expect(input).toHaveFocus();\n"})}),"\n",(0,r.jsxs)(t.h3,{id:"7-tobevisible",children:["7. ",(0,r.jsx)(t.code,{children:"toBeVisible"})]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Purpose"}),": Checks if an element is visible in the DOM."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"expect(element).toBeVisible();\n"})}),"\n",(0,r.jsxs)(t.h3,{id:"8-tobeemptydomelement",children:["8. ",(0,r.jsx)(t.code,{children:"toBeEmptyDOMElement"})]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Purpose"}),": Ensures an element has no child elements."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"expect(element).toBeEmptyDOMElement();\n"})}),"\n",(0,r.jsxs)(t.h3,{id:"9-tobedisabled",children:["9. ",(0,r.jsx)(t.code,{children:"toBeDisabled"})]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Purpose"}),": Verifies if a form element is disabled."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"expect(button).toBeDisabled();\n"})}),"\n",(0,r.jsxs)(t.h3,{id:"10-toberequired",children:["10. ",(0,r.jsx)(t.code,{children:"toBeRequired"})]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Purpose"}),": Checks if an input field is marked as required."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-javascript",children:"expect(input).toBeRequired();\n"})})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>c});var s=n(96540);const r={},i=s.createContext(r);function o(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);