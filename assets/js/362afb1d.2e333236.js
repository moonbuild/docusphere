"use strict";(self.webpackChunkapp_try=self.webpackChunkapp_try||[]).push([[3896],{22220:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"frontend/Vitest/testing-routes","title":"Testing Tanstack Router","description":"A detailed breakdown of the test suite for login functionality using Vitest and React Testing Library.","source":"@site/docs/frontend/2. Vitest/testing-routes.mdx","sourceDirName":"frontend/2. Vitest","slug":"/frontend/Vitest/testing-routes","permalink":"/docs/frontend/Vitest/testing-routes","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"title":"Testing Tanstack Router","description":"A detailed breakdown of the test suite for login functionality using Vitest and React Testing Library.","displayed-sidebar":"frontend","sidebar_position":6},"sidebar":"frontend","previous":{"title":"Testing Tanstack Query","permalink":"/docs/frontend/Vitest/testing-react-query"},"next":{"title":"Vitest Expect Matchers","permalink":"/docs/frontend/vitest/expect-matcher"}}');var i=t(74848),s=t(28453);const o={title:"Testing Tanstack Router",description:"A detailed breakdown of the test suite for login functionality using Vitest and React Testing Library.","displayed-sidebar":"frontend",sidebar_position:6},a="Login Functionality Test Suite",d={},l=[{value:"Test Setup",id:"test-setup",level:2},{value:"Render Route Utility",id:"render-route-utility",level:3},{value:"Setup and Teardown",id:"setup-and-teardown",level:3},{value:"Test Cases",id:"test-cases",level:2},{value:"1. Invalid Login Attempt",id:"1-invalid-login-attempt",level:3},{value:"2. Successful Login and Redirection",id:"2-successful-login-and-redirection",level:3},{value:"3. Validation Errors for Empty Fields",id:"3-validation-errors-for-empty-fields",level:3},{value:"4. Password Input Type",id:"4-password-input-type",level:3},{value:"5. Navigation to Register Page",id:"5-navigation-to-register-page",level:3},{value:"\ud83d\udccc GitHub Repository",id:"-github-repository",level:3}];function c(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"login-functionality-test-suite",children:"Login Functionality Test Suite"})}),"\n",(0,i.jsxs)(n.p,{children:["This documentation outlines the test suite for the login functionality. The tests are implemented using ",(0,i.jsx)(n.strong,{children:"Vitest"})," and ",(0,i.jsx)(n.strong,{children:"@testing-library/react"}),", covering different scenarios such as invalid login attempts, successful logins, validation errors, and navigation."]}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["Know more about ",(0,i.jsx)(n.a,{href:"/docs/frontend/react-testing-library",children:"React Testing Library"}),"."]})}),"\n",(0,i.jsx)(n.p,{children:"For more test cases and implementation details, check out the complete repository:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://github.com/tanishq-cloud/Notty",children:(0,i.jsx)(n.img,{src:"https://img.shields.io/badge/View%20on-GitHub-blue?logo=github",alt:"GitHub"})})}),"\n",(0,i.jsx)(n.h2,{id:"test-setup",children:"Test Setup"}),"\n",(0,i.jsxs)(n.p,{children:["To ensure a stable and consistent testing environment, we use a custom ",(0,i.jsx)(n.code,{children:"renderRoute"})," function. This function sets up routing and query management, allowing our test components to operate within the expected application context."]}),"\n",(0,i.jsx)(n.h3,{id:"render-route-utility",children:"Render Route Utility"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",metastring:'title="src/test/router-test-wrapper.tsx"',children:'// Import the generated route tree\nimport { routeTree } from "../routeTree.gen";\nimport { QueryClient, QueryClientProvider } from "@tanstack/react-query";\nimport { RouterProvider, createRouter, createMemoryHistory } from "@tanstack/react-router";\nimport { render } from "@testing-library/react";\n\nexport function renderRoute(route: string) {\n  const testQueryClient = new QueryClient({\n    defaultOptions: {\n      queries: {\n        retry: false,\n      },\n    },\n  });\n\n  const memoryHistory = createMemoryHistory({\n    initialEntries: [route],\n  });\n\n  const router = createRouter({\n    routeTree,\n    defaultNotFoundComponent: () => <div>Not found</div>,\n    context: {\n      queryClient: testQueryClient,\n    },\n    defaultPreload: "intent",\n    defaultPreloadStaleTime: 0,\n    history: memoryHistory,\n  });\n\n  const { rerender, ...result } = render(\n    <QueryClientProvider client={testQueryClient}>\n      <RouterProvider router={router} />\n    </QueryClientProvider>\n  );\n\n  return {\n    ...result,\n    rerender: () =>\n      rerender(\n        <QueryClientProvider client={testQueryClient}>\n          <RouterProvider router={router} />\n        </QueryClientProvider>\n      ),\n  };\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"setup-and-teardown",children:"Setup and Teardown"}),"\n",(0,i.jsxs)(n.p,{children:["Each test is set up with the following ",(0,i.jsx)(n.code,{children:"beforeEach"})," hook to ensure isolation and prevent cross-test contamination:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:"beforeEach(() => {\n  vi.restoreAllMocks();\n  localStorage.clear();\n  sessionStorage.clear();\n});\n"})}),"\n",(0,i.jsx)(n.p,{children:"This ensures that:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"All mocks are restored."}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"localStorage"})," and ",(0,i.jsx)(n.code,{children:"sessionStorage"})," are cleared before each test."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"test-cases",children:"Test Cases"}),"\n",(0,i.jsx)(n.h3,{id:"1-invalid-login-attempt",children:"1. Invalid Login Attempt"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'it("shows error message for invalid login", async () => {\n  vi.spyOn(authService, "login").mockRejectedValue(new Error("Invalid username or password"));\n\n  renderRoute("/login");\n\n  await screen.findByRole("heading", { name: /sign in to your account/i });\n  \n  const usernameInput = await screen.findByPlaceholderText(/Username/i);\n  const passwordInput = await screen.findByPlaceholderText(/Password/i);\n  const signInButton = screen.getByRole("button", { name: /sign in/i });\n\n  await userEvent.type(usernameInput, "wronguser");\n  await userEvent.type(passwordInput, "wrongpass");\n  await userEvent.click(signInButton);\n\n  await waitFor(() => {\n    expect(screen.getByText(/Invalid username or password/i)).toBeInTheDocument();\n  });\n});\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose:"})," Ensures that an error message is displayed for incorrect login credentials."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"2-successful-login-and-redirection",children:"2. Successful Login and Redirection"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'it("logs in successfully and redirects to notes list", async () => {\n  vi.spyOn(authService, "login").mockResolvedValue({\n    access_token: "mock-token",\n    user_id: 1,\n    full_name: "mock-name",\n    refresh_token: "mock-refresh",\n  });\n\n  renderRoute("/login");\n\n  await screen.findByRole("heading", { name: /sign in to your account/i });\n\n  const usernameInput = await screen.findByPlaceholderText(/Username/i);\n  const passwordInput = await screen.findByPlaceholderText(/Password/i);\n  const signInButton = screen.getByRole("button", { name: /sign in/i });\n\n  await userEvent.type(usernameInput, "testuser");\n  await userEvent.type(passwordInput, "password123");\n  await userEvent.click(signInButton);\n\n  await waitFor(() => {\n    expect(window.location.pathname).toBe("/");\n  });\n});\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose:"})," Verifies successful login and redirection to the notes list."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"3-validation-errors-for-empty-fields",children:"3. Validation Errors for Empty Fields"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'it("shows validation errors when fields are empty", async () => {\n  renderRoute("/login");\n\n  await screen.findByRole("heading", { name: /sign in to your account/i });\n\n  const signInButton = screen.getByRole("button", { name: /sign in/i });\n  await userEvent.click(signInButton);\n\n  await waitFor(() => {\n    expect(screen.getByPlaceholderText(/Username/i)).toHaveAttribute("required");\n    expect(screen.getByPlaceholderText(/Password/i)).toHaveAttribute("required");\n  });\n});\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose:"})," Ensures validation errors appear when required fields are empty."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"4-password-input-type",children:"4. Password Input Type"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'it("password input should be of type password", async () => {\n  renderRoute("/login");\n\n  const passwordInput = await screen.findByPlaceholderText(/Password/i);\n  expect(passwordInput).toHaveAttribute("type", "password");\n});\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose:"})," Confirms that the password field is properly secured."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"5-navigation-to-register-page",children:"5. Navigation to Register Page"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-tsx",children:'it("clicking \'Sign Up\' navigates to the register page", async () => {\n  const mockNavigate = vi.fn();\n  vi.mocked(useNavigate).mockReturnValue(mockNavigate);\n\n  renderRoute("/login");\n\n  const signUpButton = await screen.findByRole("button", { name: /sign up/i });\n  await userEvent.click(signUpButton);\n\n  await waitFor(() => {\n    expect(mockNavigate).toHaveBeenCalledWith({ to: "/register" });\n  });\n});\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Purpose:"})," Ensures the navigation to the registration page functions correctly."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"-github-repository",children:"\ud83d\udccc GitHub Repository"}),"\n",(0,i.jsxs)(n.p,{children:["For more test cases and the complete implementation, visit the ",(0,i.jsx)(n.a,{href:"https://github.com/tanishq-cloud/Notty",children:"GitHub repository"}),"."]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var r=t(96540);const i={},s=r.createContext(i);function o(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);