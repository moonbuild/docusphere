"use strict";(self.webpackChunkapp_try=self.webpackChunkapp_try||[]).push([[8294],{87788:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>d,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"backend/unittest/code-workspace","title":"Code Workspace","description":"Code Overview: Testing an API with unittest and FastAPI","source":"@site/docs/backend/unittest/code-workspace.md","sourceDirName":"backend/unittest","slug":"/backend/unittest/code-workspace","permalink":"/docusphere/docs/backend/unittest/code-workspace","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Code Workspace","displayed-sidebar":"backend","sidebar_position":3},"sidebar":"backend","previous":{"title":"Unittest Syntax","permalink":"/docusphere/docs/backend/unittest/code-syntax"},"next":{"title":"References","permalink":"/docusphere/docs/backend/unittest/references"}}');var o=t(74848),i=t(28453);const d={title:"Code Workspace","displayed-sidebar":"backend",sidebar_position:3},r=void 0,c={},l=[{value:"<strong>Code Overview: Testing an API with <code>unittest</code> and <code>FastAPI</code></strong>",id:"code-overview-testing-an-api-with-unittest-and-fastapi",level:3},{value:"<strong>Purpose</strong>",id:"purpose",level:3},{value:"<strong>Key Components</strong>",id:"key-components",level:3},{value:"1. <strong>Imports</strong>",id:"1-imports",level:4},{value:"2. <strong>Constants</strong>",id:"2-constants",level:4},{value:"3. <strong>Setup</strong>",id:"3-setup",level:4},{value:"<strong>Code Overview</strong>",id:"code-overview",level:3},{value:"<strong>1. Creating a Note</strong>",id:"1-creating-a-note",level:4},{value:"<strong>2. Updating a Note</strong>",id:"2-updating-a-note",level:4},{value:"<strong>3. Deleting a Note</strong>",id:"3-deleting-a-note",level:4},{value:"<strong>Main Test Runner</strong>",id:"main-test-runner",level:3},{value:"<strong>Output</strong>",id:"output",level:3}];function a(e){const n={a:"a",code:"code",h3:"h3",h4:"h4",hr:"hr",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h3,{id:"code-overview-testing-an-api-with-unittest-and-fastapi",children:(0,o.jsxs)(n.strong,{children:["Code Overview: Testing an API with ",(0,o.jsx)(n.code,{children:"unittest"})," and ",(0,o.jsx)(n.code,{children:"FastAPI"})]})}),"\n",(0,o.jsxs)(n.p,{children:["This Python script demonstrates how to write integration tests for a RESTful API using the ",(0,o.jsx)(n.code,{children:"unittest"})," framework and ",(0,o.jsx)(n.code,{children:"FastAPI"}),". It provides a comprehensive example of CRUD operations on notes."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"https://github.com/CGS26/Notes_app/tree/main/Backend/tests/unittest",children:(0,o.jsx)(n.img,{src:"https://img.shields.io/badge/GitHub-Refer%20to%20Repo%20for%20Details-blue?logo=github",alt:"Refer to Repo for Details"})})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"purpose",children:(0,o.jsx)(n.strong,{children:"Purpose"})}),"\n",(0,o.jsxs)(n.p,{children:["The purpose of these tests is to validate the functionality of the ",(0,o.jsx)(n.strong,{children:"Notes App Data Access Object (DAO)"})," by simulating database interactions using ",(0,o.jsx)(n.code,{children:"unittest"})," and ",(0,o.jsx)(n.code,{children:"AsyncMock"}),". These tests cover:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Creating a new note."}),"\n",(0,o.jsx)(n.li,{children:"Updating an existing note."}),"\n",(0,o.jsx)(n.li,{children:"Deleting a note."}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"key-components",children:(0,o.jsx)(n.strong,{children:"Key Components"})}),"\n",(0,o.jsxs)(n.h4,{id:"1-imports",children:["1. ",(0,o.jsx)(n.strong,{children:"Imports"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:"import unittest\nfrom unittest.mock import AsyncMock, patch\nfrom sqlalchemy.orm import Session\nfrom models.model import Note\nfrom dao.note_dao import NoteDAO\n"})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"unittest"})}),": A built-in Python testing framework for writing and running tests."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"unittest.mock.AsyncMock"})}),": Tools for mocking asynchronous and synchronous methods, respectively."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"sqlalchemy.orm.Session"})}),": Represents a database session for interacting with the database."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"Note"})}),": The database model representing a note."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"NoteDAO"})}),": The Data Access Object (DAO) responsible for interacting with the database."]}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsxs)(n.h4,{id:"2-constants",children:["2. ",(0,o.jsx)(n.strong,{children:"Constants"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'TEST_TITLE = "Test Note"\nTEST_BODY = "This is a test note."\nTEST_USER_ID = 1\nTEST_NOTE_ID = 123\n'})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsxs)(n.strong,{children:[(0,o.jsx)(n.code,{children:"TEST_TITLE"})," and ",(0,o.jsx)(n.code,{children:"TEST_BODY"})]}),": Sample data for creating or updating a note."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"TEST_USER_ID"})}),": The ID of the user associated with the note."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"TEST_NOTE_ID"})}),": The ID of the note being tested."]}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsxs)(n.h4,{id:"3-setup",children:["3. ",(0,o.jsx)(n.strong,{children:"Setup"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'class TestNoteDAO(unittest.IsolatedAsyncioTestCase):\n    def setUp(self):\n        """Set up a mock session and NoteDAO instance for testing."""\n        self.mock_db = AsyncMock(spec=Session)\n        self.note_dao = NoteDAO(db=self.mock_db)\n\n'})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"setUp"})}),": Initializes a mock database session (",(0,o.jsx)(n.code,{children:"self.mock_db"}),") and a ",(0,o.jsx)(n.code,{children:"NoteDAO"})," instance (",(0,o.jsx)(n.code,{children:"self.note_dao"}),") for use in all test cases."]}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"code-overview",children:(0,o.jsx)(n.strong,{children:"Code Overview"})}),"\n",(0,o.jsx)(n.h4,{id:"1-creating-a-note",children:(0,o.jsx)(n.strong,{children:"1. Creating a Note"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'    async def test_create_note_success(self):\n        """Test creating a note successfully."""\n        mock_note = AsyncMock()\n        mock_note.note_id = TEST_NOTE_ID\n        mock_note.title = TEST_TITLE\n        mock_note.body = TEST_BODY\n        mock_note.user_id = TEST_USER_ID\n\n        self.mock_db.add.return_value = None\n        self.mock_db.commit = AsyncMock()\n        self.mock_db.refresh = AsyncMock()\n\n        result = await self.note_dao.create_note(TEST_TITLE, TEST_BODY, TEST_USER_ID)\n\n        self.mock_db.add.assert_called_once()\n        self.mock_db.commit.assert_called_once()\n        self.mock_db.refresh.assert_called_once()\n        self.assertEqual(result.title, TEST_TITLE)\n        self.assertEqual(result.body, TEST_BODY)\n        self.assertEqual(result.user_id, TEST_USER_ID)\n'})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Purpose"}),": Validates the creation of a new note via the ",(0,o.jsx)(n.code,{children:"create_note"})," method."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Key Steps"}),":","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Mock the database session's ",(0,o.jsx)(n.code,{children:"add"}),", ",(0,o.jsx)(n.code,{children:"commit"}),", and ",(0,o.jsx)(n.code,{children:"refresh"})," methods."]}),"\n",(0,o.jsxs)(n.li,{children:["Call the ",(0,o.jsx)(n.code,{children:"create_note"})," method with valid data."]}),"\n",(0,o.jsx)(n.li,{children:"Verify that the database methods were called as expected."}),"\n",(0,o.jsx)(n.li,{children:"Validate the returned note's attributes."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h4,{id:"2-updating-a-note",children:(0,o.jsx)(n.strong,{children:"2. Updating a Note"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'    @patch("dao.note_dao.NoteDAO.get_note_by_id")\n    async def test_update_note_success(self, mock_get_note_by_id):\n        """Test updating a note successfully."""\n        mock_note = Note(note_id=TEST_NOTE_ID, title=TEST_TITLE, body=TEST_BODY, user_id=TEST_USER_ID)\n        mock_get_note_by_id.return_value = mock_note\n\n        self.mock_db.commit = AsyncMock()\n        self.mock_db.refresh = AsyncMock()\n\n        result = await self.note_dao.update_note(TEST_NOTE_ID, "Updated Title", "Updated Body")\n\n        mock_get_note_by_id.assert_called_once_with(TEST_NOTE_ID)\n        self.mock_db.commit.assert_called_once()\n        self.mock_db.refresh.assert_called_once()\n        self.assertEqual(result.title, "Updated Title")\n        self.assertEqual(result.body, "Updated Body")\n'})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Purpose"}),": Validates updating an existing note via the ",(0,o.jsx)(n.code,{children:"update_note"})," method."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Key Steps"}),":","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Mock the retrieval of the note to be updated."}),"\n",(0,o.jsxs)(n.li,{children:["Call the ",(0,o.jsx)(n.code,{children:"update_note"})," method with updated data."]}),"\n",(0,o.jsx)(n.li,{children:"Verify that the database methods were called as expected."}),"\n",(0,o.jsx)(n.li,{children:"Validate the updated note's attributes."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h4,{id:"3-deleting-a-note",children:(0,o.jsx)(n.strong,{children:"3. Deleting a Note"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'    @patch("dao.note_dao.NoteDAO.get_note_by_id")\n    async def test_delete_note_success(self, mock_get_note_by_id):\n        """Test deleting a note successfully."""\n        mock_note = Note(note_id=TEST_NOTE_ID, title=TEST_TITLE, body=TEST_BODY, user_id=TEST_USER_ID)\n        mock_get_note_by_id.return_value = mock_note\n\n        self.mock_db.delete = AsyncMock()\n        self.mock_db.commit = AsyncMock()\n\n        result = await self.note_dao.delete_note(TEST_NOTE_ID)\n\n        mock_get_note_by_id.assert_called_once_with(TEST_NOTE_ID)\n        self.mock_db.delete.assert_called_once_with(mock_note)\n        self.mock_db.commit.assert_called_once()\n        self.assertEqual(result.note_id, TEST_NOTE_ID)\n'})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Purpose"}),": Validates deleting a note via the ",(0,o.jsx)(n.code,{children:"delete_note"})," method."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"Key Steps"}),":","\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Mock the retrieval of the note to be deleted."}),"\n",(0,o.jsxs)(n.li,{children:["Call the ",(0,o.jsx)(n.code,{children:"delete_note"})," method with the note's ID."]}),"\n",(0,o.jsx)(n.li,{children:"Verify that the database methods were called as expected."}),"\n",(0,o.jsx)(n.li,{children:"Validate the deleted note's attributes."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"main-test-runner",children:(0,o.jsx)(n.strong,{children:"Main Test Runner"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'if __name__ == "__main__":\n    unittest.main(verbosity=2)\n'})}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Executes all test cases when the script is run directly."}),"\n"]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h3,{id:"output",children:(0,o.jsx)(n.strong,{children:"Output"})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"alt text",src:t(50111).A+"",width:"1476",height:"322"})}),"\n",(0,o.jsx)(n.hr,{})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(a,{...e})}):a(e)}},50111:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/dao-1-d5c1858477f2ca1786e87bdb9e029507.gif"},28453:(e,n,t)=>{t.d(n,{R:()=>d,x:()=>r});var s=t(96540);const o={},i=s.createContext(o);function d(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:d(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);