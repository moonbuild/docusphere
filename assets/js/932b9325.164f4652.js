"use strict";(self.webpackChunkapp_try=self.webpackChunkapp_try||[]).push([[1840],{21123:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>c,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"frontend/Vitest/code-syntax","title":"Code Syntax","description":"---","source":"@site/docs/frontend/2. Vitest/code-syntax.mdx","sourceDirName":"frontend/2. Vitest","slug":"/frontend/vitest/code-syntax","permalink":"/docs/frontend/vitest/code-syntax","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Code Syntax","displayed-sidebar":"frontend","sidebar_position":3,"slug":"/frontend/vitest/code-syntax","authors":["tanishq"]},"sidebar":"frontend","previous":{"title":"Getting Started","permalink":"/docs/frontend/vitest/getting-started"},"next":{"title":"Code Workspace","permalink":"/docs/frontend/Vitest/code-workspace"}}');var o=s(74848),i=s(28453);const c={title:"Code Syntax","displayed-sidebar":"frontend",sidebar_position:3,slug:"/frontend/vitest/code-syntax",authors:["tanishq"]},r="Writing Test Cases in Vitest",a={},d=[{value:"Test Suites with <code>describe</code>",id:"test-suites-with-describe",level:2},{value:"Test Cases with <code>it</code>",id:"test-cases-with-it",level:2},{value:"Assertions with <code>expect</code>",id:"assertions-with-expect",level:2},{value:"Mocking Functions",id:"mocking-functions",level:2},{value:"Mocking Modules",id:"mocking-modules",level:2},{value:"Mocking Custom Hooks",id:"mocking-custom-hooks",level:2},{value:"Other Useful Methods",id:"other-useful-methods",level:2},{value:"<code>beforeEach</code> and <code>afterEach</code>",id:"beforeeach-and-aftereach",level:3},{value:"<code>beforeAll</code> and <code>afterAll</code>",id:"beforeall-and-afterall",level:3},{value:"<code>vi.spyOn</code>",id:"vispyon",level:3},{value:"<code>vi.useFakeTimers</code>",id:"viusefaketimers",level:3}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"writing-test-cases-in-vitest",children:"Writing Test Cases in Vitest"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsxs)(n.h2,{id:"test-suites-with-describe",children:["Test Suites with ",(0,o.jsx)(n.code,{children:"describe"})]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"describe"})," function is used to group related test cases into a test suite. This helps in organizing your tests logically and makes them easier to maintain."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"import { describe, it, expect } from 'vitest';\n\ndescribe('Math Operations', () => {\n  it('adds 1 + 1 to equal 2', () => {\n    expect(1 + 1).toBe(2);\n  });\n\n  it('subtracts 2 - 1 to equal 1', () => {\n    expect(2 - 1).toBe(1);\n  });\n});\n"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsxs)(n.h2,{id:"test-cases-with-it",children:["Test Cases with ",(0,o.jsx)(n.code,{children:"it"})]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"it"})," function defines individual test cases. Each test case should focus on testing a single unit of functionality."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"it('multiplies 2 * 3 to equal 6', () => {\n  expect(2 * 3).toBe(6);\n});\n"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsxs)(n.h2,{id:"assertions-with-expect",children:["Assertions with ",(0,o.jsx)(n.code,{children:"expect"})]}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"expect"})," function is used to make assertions about the output of your code. Vitest provides a variety of matchers to check different conditions."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"it('checks if value is truthy', () => {\n  expect(true).toBeTruthy();\n});\n\nit('checks if value is falsy', () => {\n  expect(false).toBeFalsy();\n});\n\nit('checks if arrays are equal', () => {\n  expect([1, 2, 3]).toEqual([1, 2, 3]);\n});\n"})}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsxs)(n.p,{children:["For more matchers ",(0,o.jsx)(n.a,{href:"/docs/frontend/vitest/expect-matcher",children:"check this"}),"."]})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"mocking-functions",children:"Mocking Functions"}),"\n",(0,o.jsxs)(n.p,{children:["Vitest allows you to mock functions using ",(0,o.jsx)(n.code,{children:"vi.fn()"}),". This is particularly useful for testing functions that depend on external logic."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"import { vi } from 'vitest';\n\nconst mockFunction = vi.fn();\n\nmockFunction(1, 2, 3);\n\nexpect(mockFunction).toHaveBeenCalledWith(1, 2, 3);\n"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"mocking-modules",children:"Mocking Modules"}),"\n",(0,o.jsxs)(n.p,{children:["You can mock entire modules using ",(0,o.jsx)(n.code,{children:"vi.mock()"}),". This is helpful when you want to simulate the behavior of external dependencies in your tests."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"import { vi } from 'vitest';\nimport axios from 'axios';\n\nvi.mock('axios');\n\naxios.get.mockResolvedValue({ data: 'mocked data' });\n\nit('fetches data from an API', async () => {\n  const response = await axios.get('/api/data');\n  expect(response.data).toBe('mocked data');\n});\n"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"mocking-custom-hooks",children:"Mocking Custom Hooks"}),"\n",(0,o.jsxs)(n.p,{children:["To mock a custom hook, you can use ",(0,o.jsx)(n.code,{children:"vi.mock()"})," to mock the module where the hook is defined. This is especially useful when testing React components."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"import { vi } from 'vitest';\nimport { renderHook } from '@testing-library/react-hooks';\nimport useCustomHook from './useCustomHook';\n\nvi.mock('./useCustomHook');\n\nuseCustomHook.mockReturnValue('mocked value');\n\nit('uses a custom hook', () => {\n  const { result } = renderHook(() => useCustomHook());\n  expect(result.current).toBe('mocked value');\n});\n"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"other-useful-methods",children:"Other Useful Methods"}),"\n",(0,o.jsxs)(n.h3,{id:"beforeeach-and-aftereach",children:[(0,o.jsx)(n.code,{children:"beforeEach"})," and ",(0,o.jsx)(n.code,{children:"afterEach"})]}),"\n",(0,o.jsx)(n.p,{children:"These methods allow you to run setup and teardown code before and after each test in a suite."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"beforeEach(() => {\n  // Setup code\n});\n\nafterEach(() => {\n  // Teardown code\n});\n"})}),"\n",(0,o.jsxs)(n.h3,{id:"beforeall-and-afterall",children:[(0,o.jsx)(n.code,{children:"beforeAll"})," and ",(0,o.jsx)(n.code,{children:"afterAll"})]}),"\n",(0,o.jsx)(n.p,{children:"These methods run setup and teardown code once before and after all tests in a suite."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"beforeAll(() => {\n  // Setup code\n});\n\nafterAll(() => {\n  // Teardown code\n});\n"})}),"\n",(0,o.jsx)(n.h3,{id:"vispyon",children:(0,o.jsx)(n.code,{children:"vi.spyOn"})}),"\n",(0,o.jsxs)(n.p,{children:["Use ",(0,o.jsx)(n.code,{children:"vi.spyOn"})," to spy on methods of an object. This is useful for verifying that a method is called with the correct arguments. Know more about ",(0,o.jsx)(n.a,{href:"/docs/frontend/spying-on-function-in-vitest",children:"how spies work in Vitest"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"const obj = { method: () => 'original' };\nconst spy = vi.spyOn(obj, 'method').mockReturnValue('mocked');\n\nexpect(obj.method()).toBe('mocked');\n"})}),"\n",(0,o.jsx)(n.h3,{id:"viusefaketimers",children:(0,o.jsx)(n.code,{children:"vi.useFakeTimers"})}),"\n",(0,o.jsxs)(n.p,{children:["Mock timers like ",(0,o.jsx)(n.code,{children:"setTimeout"})," and ",(0,o.jsx)(n.code,{children:"setInterval"})," using ",(0,o.jsx)(n.code,{children:"vi.useFakeTimers"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-javascript",children:"vi.useFakeTimers();\n\nsetTimeout(() => {\n  console.log('Hello, World!');\n}, 1000);\n\nvi.advanceTimersByTime(1000);\n"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsxs)(n.p,{children:["For more detailed information, refer to the ",(0,o.jsx)(n.a,{href:"https://vitest.dev/",children:"official Vitest documentation"}),"."]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>c,x:()=>r});var t=s(96540);const o={},i=t.createContext(o);function c(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:c(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);