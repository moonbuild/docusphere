"use strict";(self.webpackChunkapp_try=self.webpackChunkapp_try||[]).push([[508],{9917:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"backend/httpx/code-syntax","title":"HTTPX Syntax","description":"1. Making HTTP Requests","source":"@site/docs/backend/httpx/code-syntax.md","sourceDirName":"backend/httpx","slug":"/backend/httpx/code-syntax","permalink":"/docusphere/docs/backend/httpx/code-syntax","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"HTTPX Syntax","displayed-sidebar":"backend","sidebar_position":3},"sidebar":"backend","previous":{"title":"Installation","permalink":"/docusphere/docs/backend/httpx/Installation"},"next":{"title":"Code Workspace","permalink":"/docusphere/docs/backend/httpx/code-workspace"}}');var i=s(74848),r=s(28453);const o={title:"HTTPX Syntax","displayed-sidebar":"backend",sidebar_position:3},l=void 0,a={},c=[{value:"<strong>1. Making HTTP Requests</strong>",id:"1-making-http-requests",level:2},{value:"<strong>Synchronous Requests</strong>",id:"synchronous-requests",level:3},{value:"<strong>Example:</strong>",id:"example",level:4},{value:"<strong>output</strong>",id:"output",level:4},{value:"<strong>Asynchronous Requests</strong>",id:"asynchronous-requests",level:3},{value:"<strong>Example:</strong>",id:"example-1",level:4},{value:"<strong>2. Making HTTP Requests With a Client</strong>",id:"2-making-http-requests-with-a-client",level:2},{value:"<strong>Understanding HTTPX Clients for Request Handling</strong>",id:"understanding-httpx-clients-for-request-handling",level:3},{value:"<strong>Why Use an HTTPX Client?</strong>",id:"why-use-an-httpx-client",level:4},{value:"<strong>Synchronous Client</strong>",id:"synchronous-client",level:3},{value:"<strong>Example:</strong>",id:"example-2",level:4},{value:"<strong>Asynchronous Client</strong>",id:"asynchronous-client",level:3},{value:"<strong>Example:</strong>",id:"example-3",level:4},{value:"<strong>3. Key Differences: Top-Level Functions vs. Client Instances</strong>",id:"3-key-differences-top-level-functions-vs-client-instances",level:2},{value:"<strong>4. Common Use Cases for Using a Client</strong>",id:"4-common-use-cases-for-using-a-client",level:2},{value:"<strong>a. Managing Shared Configurations</strong>",id:"a-managing-shared-configurations",level:3},{value:"<strong>Example:</strong>",id:"example-4",level:4},{value:"<strong>b. Reusing Connections for Performance</strong>",id:"b-reusing-connections-for-performance",level:3},{value:"<strong>Example:</strong>",id:"example-5",level:4},{value:"<strong>c. Handling Authentication</strong>",id:"c-handling-authentication",level:3},{value:"<strong>Example:</strong>",id:"example-6",level:4},{value:"<strong>d. Streaming Large Files</strong>",id:"d-streaming-large-files",level:3},{value:"<strong>Example:</strong>",id:"example-7",level:4},{value:"<strong>e. Testing APIs with Consistent Configurations</strong>",id:"e-testing-apis-with-consistent-configurations",level:3},{value:"<strong>Example:</strong>",id:"example-8",level:4}];function d(e){const n={code:"code",h2:"h2",h3:"h3",h4:"h4",hr:"hr",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"1-making-http-requests",children:(0,i.jsx)(n.strong,{children:"1. Making HTTP Requests"})}),"\n",(0,i.jsxs)(n.p,{children:["For simple, isolated requests, HTTPX allows you to use ",(0,i.jsx)(n.strong,{children:"top-level functions"})," like ",(0,i.jsx)(n.code,{children:"httpx.get()"}),", ",(0,i.jsx)(n.code,{children:"httpx.post()"}),", and others. This approach is ideal for quick, one-off requests when performance optimizations like connection reuse are not necessary."]}),"\n",(0,i.jsx)(n.h3,{id:"synchronous-requests",children:(0,i.jsx)(n.strong,{children:"Synchronous Requests"})}),"\n",(0,i.jsx)(n.p,{children:"In the synchronous mode, HTTPX blocks the program\u2019s execution until the request is completed. Use this approach when you need straightforward, blocking HTTP requests."}),"\n",(0,i.jsx)(n.h4,{id:"example",children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import httpx\n\n# Sending a GET Request\nresponse = httpx.get("https://jsonplaceholder.typicode.com/posts/1")\nassert response.status_code == 200\nprint(response.json())\n\n# Sending a POST Request\nresponse = httpx.post(\n    "https://jsonplaceholder.typicode.com/posts",\n    json={"title": "foo", "body": "bar", "userId": 1}\n)\nassert response.status_code == 201\nprint(response.json())\n'})}),"\n",(0,i.jsx)(n.h4,{id:"output",children:(0,i.jsx)(n.strong,{children:"output"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"alt text",src:s(2767).A+"",width:"1336",height:"88"})}),"\n",(0,i.jsx)(n.h3,{id:"asynchronous-requests",children:(0,i.jsx)(n.strong,{children:"Asynchronous Requests"})}),"\n",(0,i.jsxs)(n.p,{children:["In the asynchronous mode, HTTPX allows non-blocking requests by using ",(0,i.jsx)(n.code,{children:"await"}),", which makes it ideal for handling I/O-bound tasks like web scraping or interacting with APIs in parallel."]}),"\n",(0,i.jsx)(n.h4,{id:"example-1",children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import asyncio\nimport httpx\n\nasync def fetch_data():\n    # GET Request\n    response = await httpx.get("https://jsonplaceholder.typicode.com/posts/1")\n    assert response.status_code == 200\n    print(response.json())\n\n    # POST Request\n    response = await httpx.post(\n        "https://jsonplaceholder.typicode.com/posts",\n        json={"title": "foo", "body": "bar", "userId": 1}\n    )\n    assert response.status_code == 201\n    print(response.json())\n\n# Run the async function\nasyncio.run(fetch_data())\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Key Notes"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"httpx.get()"})," and ",(0,i.jsx)(n.code,{children:"httpx.post()"})," are used for sending HTTP requests."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Synchronous requests"})," block the execution until a response is received."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Asynchronous requests"})," allow concurrent requests without blocking the program."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"2-making-http-requests-with-a-client",children:(0,i.jsx)(n.strong,{children:"2. Making HTTP Requests With a Client"})}),"\n",(0,i.jsx)(n.h3,{id:"understanding-httpx-clients-for-request-handling",children:(0,i.jsx)(n.strong,{children:"Understanding HTTPX Clients for Request Handling"})}),"\n",(0,i.jsxs)(n.p,{children:["In scenarios where you need to perform multiple requests, manage persistent connections, or configure shared settings, using an ",(0,i.jsx)(n.code,{children:"httpx.Client"})," or ",(0,i.jsx)(n.code,{children:"httpx.AsyncClient"})," is highly recommended. Clients are designed for efficiency and flexibility, making them an essential tool for applications requiring frequent communication with the same server."]}),"\n",(0,i.jsx)(n.h4,{id:"why-use-an-httpx-client",children:(0,i.jsx)(n.strong,{children:"Why Use an HTTPX Client?"})}),"\n",(0,i.jsxs)(n.p,{children:["When you use the basic HTTPX functions (like ",(0,i.jsx)(n.code,{children:"httpx.get()"})," or ",(0,i.jsx)(n.code,{children:"httpx.post()"}),"), a new connection is established for each request. This process quickly becomes inefficient when multiple requests are made to the same host, leading to unnecessary resource usage."]}),"\n",(0,i.jsx)(n.p,{children:"A Client instance, however, uses connection pooling, meaning that it reuses the same TCP connection for multiple requests to the same server."}),"\n",(0,i.jsxs)(n.p,{children:["By adopting ",(0,i.jsx)(n.code,{children:"httpx.Client"})," or ",(0,i.jsx)(n.code,{children:"httpx.AsyncClient"}),", you can build faster, more efficient, and more scalable applications. This makes them indispensable for scenarios that demand optimized communication with remote services."]}),"\n",(0,i.jsx)(n.h3,{id:"synchronous-client",children:(0,i.jsx)(n.strong,{children:"Synchronous Client"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"httpx.Client"})," class is used for synchronous requests. It manages connection pooling and other settings like headers and cookies."]}),"\n",(0,i.jsx)(n.h4,{id:"example-2",children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import httpx\n\n# Using a synchronous client\nwith httpx.Client() as client:\n    # Sending a GET Request\n    response = client.get("https://jsonplaceholder.typicode.com/posts/1")\n    assert response.status_code == 200\n    print(response.json())\n\n    # Sending a POST Request\n    response = client.post(\n        "https://jsonplaceholder.typicode.com/posts",\n        json={"title": "foo", "body": "bar", "userId": 1}\n    )\n    assert response.status_code == 201\n    print(response.json())\n'})}),"\n",(0,i.jsx)(n.h3,{id:"asynchronous-client",children:(0,i.jsx)(n.strong,{children:"Asynchronous Client"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"httpx.AsyncClient"})," class is designed for asynchronous HTTP requests, allowing non-blocking operations. It\u2019s particularly useful in high-performance, I/O-bound applications."]}),"\n",(0,i.jsx)(n.h4,{id:"example-3",children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import asyncio\nimport httpx\n\n# Using an asynchronous client\nasync def fetch_data():\n    async with httpx.AsyncClient() as client:\n        # Sending a GET Request\n        response = await client.get("https://jsonplaceholder.typicode.com/posts/1")\n        assert response.status_code == 200\n        print(response.json())\n\n        # Sending a POST Request\n        response = await client.post(\n            "https://jsonplaceholder.typicode.com/posts",\n            json={"title": "foo", "body": "bar", "userId": 1}\n        )\n        assert response.status_code == 201\n        print(response.json())\n\n# Run the async function\nasyncio.run(fetch_data())\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Key Notes"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Client management"})," allows for connection reuse, reducing overhead."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Persistent Connections"})," help improve performance for multiple requests to the same server."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Shared Configuration"}),": Clients allow the sharing of settings like headers, cookies, and authentication across multiple requests."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"3-key-differences-top-level-functions-vs-client-instances",children:(0,i.jsx)(n.strong,{children:"3. Key Differences: Top-Level Functions vs. Client Instances"})}),"\n",(0,i.jsx)(n.p,{children:"Here\u2019s a quick comparison of the two approaches:"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Feature"}),(0,i.jsx)(n.th,{children:"Without a Client"}),(0,i.jsx)(n.th,{children:"With a Client"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Connection Management"})}),(0,i.jsx)(n.td,{children:"Automatically managed per request"}),(0,i.jsx)(n.td,{children:"Persistent connection pool for efficiency"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Shared Configuration"})}),(0,i.jsx)(n.td,{children:"Limited (independent per request)"}),(0,i.jsx)(n.td,{children:"Shared headers, cookies, auth, etc."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Use Case"})}),(0,i.jsx)(n.td,{children:"Simple, one-off requests"}),(0,i.jsx)(n.td,{children:"Multiple requests with shared configurations"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.strong,{children:"Performance"})}),(0,i.jsx)(n.td,{children:"Suitable for fewer requests"}),(0,i.jsx)(n.td,{children:"Faster for bulk requests due to connection reuse"})]})]})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"4-common-use-cases-for-using-a-client",children:(0,i.jsx)(n.strong,{children:"4. Common Use Cases for Using a Client"})}),"\n",(0,i.jsxs)(n.p,{children:["Using ",(0,i.jsx)(n.code,{children:"httpx.Client"})," or ",(0,i.jsx)(n.code,{children:"httpx.AsyncClient"})," becomes especially beneficial in the following situations:"]}),"\n",(0,i.jsx)(n.h3,{id:"a-managing-shared-configurations",children:(0,i.jsx)(n.strong,{children:"a. Managing Shared Configurations"})}),"\n",(0,i.jsx)(n.p,{children:"When you need consistent headers, cookies, or authentication settings across multiple requests."}),"\n",(0,i.jsx)(n.h4,{id:"example-4",children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import httpx\n\n# Setting headers globally\nheaders = {"Authorization": "Bearer YOUR_TOKEN"}\nwith httpx.Client(headers=headers) as client:\n    response = client.get("https://api.example.com/user")\n    assert response.status_code == 200\n    print(response.json())\n'})}),"\n",(0,i.jsx)(n.h3,{id:"b-reusing-connections-for-performance",children:(0,i.jsx)(n.strong,{children:"b. Reusing Connections for Performance"})}),"\n",(0,i.jsx)(n.p,{children:"If you are making several requests to the same server, reusing the connection pool improves speed and reduces resource consumption."}),"\n",(0,i.jsx)(n.h4,{id:"example-5",children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import httpx\n\nwith httpx.Client() as client:\n    for i in range(5):\n        response = client.get(f"https://jsonplaceholder.typicode.com/posts/{i + 1}")\n        print(response.json())\n'})}),"\n",(0,i.jsx)(n.h3,{id:"c-handling-authentication",children:(0,i.jsx)(n.strong,{children:"c. Handling Authentication"})}),"\n",(0,i.jsx)(n.p,{children:"For authenticated API requests, using a client with built-in support for authentication schemes (like Basic Auth or OAuth2) simplifies repeated authentication handling."}),"\n",(0,i.jsx)(n.h4,{id:"example-6",children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import httpx\n\n# Using Basic Authentication\nauth = ("username", "password")\nwith httpx.Client(auth=auth) as client:\n    response = client.get("https://api.example.com/protected-resource")\n    assert response.status_code == 200\n    print(response.json())\n'})}),"\n",(0,i.jsx)(n.h3,{id:"d-streaming-large-files",children:(0,i.jsx)(n.strong,{children:"d. Streaming Large Files"})}),"\n",(0,i.jsx)(n.p,{children:"For efficient downloading or uploading of large files, using a client to stream data can help manage memory usage and reduce overhead."}),"\n",(0,i.jsx)(n.h4,{id:"example-7",children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import httpx\n\n# Downloading a large file in chunks\nwith httpx.Client() as client:\n    with client.stream("GET", "https://example.com/large-file") as response:\n        with open("large-file", "wb") as file:\n            for chunk in response.iter_bytes():\n                file.write(chunk)\n'})}),"\n",(0,i.jsx)(n.h3,{id:"e-testing-apis-with-consistent-configurations",children:(0,i.jsx)(n.strong,{children:"e. Testing APIs with Consistent Configurations"})}),"\n",(0,i.jsx)(n.p,{children:"When interacting with an API that requires multiple requests, using a client simplifies management of base URLs, headers, and other configurations."}),"\n",(0,i.jsx)(n.h4,{id:"example-8",children:(0,i.jsx)(n.strong,{children:"Example:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import httpx\n\nwith httpx.Client(base_url="https://api.example.com") as client:\n    # First Request\n    response = client.get("/user")\n    assert response.status_code == 200\n    print(response.json())\n\n    # Second Request\n    response = client.post("/data", json={"key": "value"})\n    assert response.status_code == 201\n    print(response.json())\n'})}),"\n",(0,i.jsx)(n.hr,{})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},2767:(e,n,s)=>{s.d(n,{A:()=>t});const t=s.p+"assets/images/image-225d61023bc5267be6b88754c7950e70.png"},28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>l});var t=s(96540);const i={},r=t.createContext(i);function o(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);