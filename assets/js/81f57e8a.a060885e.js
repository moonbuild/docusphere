"use strict";(self.webpackChunkapp_try=self.webpackChunkapp_try||[]).push([[2496],{51307:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>o,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"backend/pytest/code-syntax","title":"Pytest Syntax","description":"1. Basic Test Syntax","source":"@site/docs/backend/pytest/code-syntax.md","sourceDirName":"backend/pytest","slug":"/backend/pytest/code-syntax","permalink":"/docusphere/docs/backend/pytest/code-syntax","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Pytest Syntax","displayed-sidebar":"backend","sidebar_position":3},"sidebar":"backend","previous":{"title":"Installation","permalink":"/docusphere/docs/backend/pytest/Installation"},"next":{"title":"Code Workspace","permalink":"/docusphere/docs/backend/pytest/code-workspace"}}');var r=n(74848),i=n(28453);const a={title:"Pytest Syntax","displayed-sidebar":"backend",sidebar_position:3},l=void 0,o={},d=[{value:"<strong>1. Basic Test Syntax</strong>",id:"1-basic-test-syntax",level:2},{value:"<strong>Example:</strong>",id:"example",level:4},{value:"<strong>2. Using Fixtures for Setup and Teardown</strong>",id:"2-using-fixtures-for-setup-and-teardown",level:2},{value:"<strong>Basic Example:</strong>",id:"basic-example",level:4},{value:"<strong>3. Parameterized Testing</strong>",id:"3-parameterized-testing",level:2},{value:"<strong>Example:</strong>",id:"example-1",level:4},{value:"<strong>4. Assertions</strong>",id:"4-assertions",level:2},{value:"<strong>Common Assertions:</strong>",id:"common-assertions",level:4},{value:"<strong>5. Running Tests</strong>",id:"5-running-tests",level:2},{value:"<strong>Command-Line Options:</strong>",id:"command-line-options",level:4},{value:"<strong>6. Working with Asynchronous Tests</strong>",id:"6-working-with-asynchronous-tests",level:2},{value:"<strong>Example:</strong>",id:"example-2",level:4},{value:"<strong>7. Organizing and Discovering Tests</strong>",id:"7-organizing-and-discovering-tests",level:2},{value:"<strong>Test Structure Example:</strong>",id:"test-structure-example",level:4},{value:"<strong>8. Skipping Tests and Expected Failures</strong>",id:"8-skipping-tests-and-expected-failures",level:2},{value:"<strong>Skipping a Test:</strong>",id:"skipping-a-test",level:4},{value:"<strong>Expected Failure:</strong>",id:"expected-failure",level:4},{value:"<strong>9. Testing Class-Based OOP Structures</strong>",id:"9-testing-class-based-oop-structures",level:2},{value:"<strong>9.1 Testing Classes and Methods</strong>",id:"91-testing-classes-and-methods",level:3},{value:"<strong>Example:</strong>",id:"example-3",level:4},{value:"<strong>Test:</strong>",id:"test",level:4},{value:"<strong>9.2 Using Fixtures with Classes</strong>",id:"92-using-fixtures-with-classes",level:3},{value:"<strong>Example:</strong>",id:"example-4",level:4},{value:"<strong>9.3 Testing Inheritance</strong>",id:"93-testing-inheritance",level:3},{value:"<strong>Example:</strong>",id:"example-5",level:4},{value:"<strong>Test:</strong>",id:"test-1",level:4},{value:"<strong>9.4 Mocking Dependencies in Classes</strong>",id:"94-mocking-dependencies-in-classes",level:3},{value:"<strong>Example:</strong>",id:"example-6",level:4},{value:"<strong>9.5 Testing Exceptions in Classes</strong>",id:"95-testing-exceptions-in-classes",level:3},{value:"<strong>Example:</strong>",id:"example-7",level:4}];function c(e){const s={code:"code",h2:"h2",h3:"h3",h4:"h4",hr:"hr",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.h2,{id:"1-basic-test-syntax",children:(0,r.jsx)(s.strong,{children:"1. Basic Test Syntax"})}),"\n",(0,r.jsxs)(s.p,{children:["To define a test function, use the ",(0,r.jsx)(s.code,{children:"test_"})," prefix for the function name. This ensures that Pytest recognizes it as a test."]}),"\n",(0,r.jsx)(s.h4,{id:"example",children:(0,r.jsx)(s.strong,{children:"Example:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:"def test_addition():\n    assert 1 + 1 == 2\n"})}),"\n",(0,r.jsxs)(s.p,{children:[(0,r.jsx)(s.strong,{children:"output:"}),"\n",(0,r.jsx)(s.img,{alt:"alt text",src:n(19064).A+"",width:"1304",height:"245"})]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"2-using-fixtures-for-setup-and-teardown",children:(0,r.jsx)(s.strong,{children:"2. Using Fixtures for Setup and Teardown"})}),"\n",(0,r.jsxs)(s.p,{children:["Fixtures are reusable pieces of setup code that can be shared across multiple tests. They are defined using the ",(0,r.jsx)(s.code,{children:"@pytest.fixture"})," decorator."]}),"\n",(0,r.jsx)(s.h4,{id:"basic-example",children:(0,r.jsx)(s.strong,{children:"Basic Example:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'import pytest\n\n@pytest.fixture\ndef setup_data():\n    data = {"name": "John", "age": 30}\n    return data\n\ndef test_user_name(setup_data):\n    assert setup_data["name"] == "John"\n'})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"3-parameterized-testing",children:(0,r.jsx)(s.strong,{children:"3. Parameterized Testing"})}),"\n",(0,r.jsx)(s.p,{children:"Parameterized testing allows you to run the same test with different sets of inputs, reducing redundancy."}),"\n",(0,r.jsx)(s.h4,{id:"example-1",children:(0,r.jsx)(s.strong,{children:"Example:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'import pytest\n\n@pytest.mark.parametrize("input1, input2, expected", [\n    (1, 1, 2),\n    (2, 2, 4),\n    (3, 3, 6)\n])\ndef test_addition(input1, input2, expected):\n    assert input1 + input2 == expected\n'})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"4-assertions",children:(0,r.jsx)(s.strong,{children:"4. Assertions"})}),"\n",(0,r.jsx)(s.p,{children:"Assertions are crucial for verifying that the code behaves as expected. Pytest provides detailed output when assertions fail."}),"\n",(0,r.jsx)(s.h4,{id:"common-assertions",children:(0,r.jsx)(s.strong,{children:"Common Assertions:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'def test_example():\n    assert 1 == 1                 # Equality assertion\n    assert 1 != 2                 # Inequality assertion\n    assert [1, 2, 3] == [1, 2, 3]  # List equality\n    assert "apple" in "pineapple"  # Containment assertion\n    assert not isinstance(123, str)  # Type assertion\n'})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"5-running-tests",children:(0,r.jsx)(s.strong,{children:"5. Running Tests"})}),"\n",(0,r.jsx)(s.p,{children:"To execute tests, use the following command:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"pytest\n"})}),"\n",(0,r.jsx)(s.p,{children:"You can also specify a file or directory:"}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-bash",children:"pytest test_example.py  # Run tests in a specific file\npytest tests/           # Run tests in a directory\n"})}),"\n",(0,r.jsx)(s.h4,{id:"command-line-options",children:(0,r.jsx)(s.strong,{children:"Command-Line Options:"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"-v"}),": Verbose output."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.code,{children:"--maxfail=<num>"}),": Stop after a specific number of failures."]}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"6-working-with-asynchronous-tests",children:(0,r.jsx)(s.strong,{children:"6. Working with Asynchronous Tests"})}),"\n",(0,r.jsxs)(s.p,{children:["For testing asynchronous code, use the ",(0,r.jsx)(s.code,{children:"pytest-asyncio"})," plugin."]}),"\n",(0,r.jsx)(s.h4,{id:"example-2",children:(0,r.jsx)(s.strong,{children:"Example:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:"import pytest\nimport asyncio\n\n@pytest.mark.asyncio\nasync def test_async_addition():\n    await asyncio.sleep(1)\n    assert 2 + 2 == 4\n"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Decorator:"})," ",(0,r.jsx)(s.code,{children:"@pytest.mark.asyncio"})," allows testing of asynchronous functions."]}),"\n"]}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"7-organizing-and-discovering-tests",children:(0,r.jsx)(s.strong,{children:"7. Organizing and Discovering Tests"})}),"\n",(0,r.jsxs)(s.p,{children:["Pytest automatically discovers tests in files prefixed with ",(0,r.jsx)(s.code,{children:"test_"})," or suffixed with ",(0,r.jsx)(s.code,{children:"_test.py"}),". You can organize tests in directories."]}),"\n",(0,r.jsx)(s.h4,{id:"test-structure-example",children:(0,r.jsx)(s.strong,{children:"Test Structure Example:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{children:"tests/\n    test_basic.py\n    test_advanced.py\n    subdir/\n        test_submodule.py\n"})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"8-skipping-tests-and-expected-failures",children:(0,r.jsx)(s.strong,{children:"8. Skipping Tests and Expected Failures"})}),"\n",(0,r.jsx)(s.p,{children:"You can skip tests or mark them as expected failures using decorators."}),"\n",(0,r.jsx)(s.h4,{id:"skipping-a-test",children:(0,r.jsx)(s.strong,{children:"Skipping a Test:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'import pytest\n\n@pytest.mark.skip(reason="This test is not yet implemented.")\ndef test_not_implemented():\n    assert False\n'})}),"\n",(0,r.jsx)(s.h4,{id:"expected-failure",children:(0,r.jsx)(s.strong,{children:"Expected Failure:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:"@pytest.mark.xfail\ndef test_expected_failure():\n    assert 1 == 2  # This will be marked as an expected failure\n"})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h2,{id:"9-testing-class-based-oop-structures",children:(0,r.jsx)(s.strong,{children:"9. Testing Class-Based OOP Structures"})}),"\n",(0,r.jsx)(s.p,{children:"Pytest supports testing classes and their methods effectively."}),"\n",(0,r.jsx)(s.h3,{id:"91-testing-classes-and-methods",children:(0,r.jsx)(s.strong,{children:"9.1 Testing Classes and Methods"})}),"\n",(0,r.jsx)(s.p,{children:"You can test classes and their methods by creating instances within your tests and verifying their behavior."}),"\n",(0,r.jsx)(s.h4,{id:"example-3",children:(0,r.jsx)(s.strong,{children:"Example:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'# person.py\nclass Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def greet(self):\n        return f"Hello, my name is {self.name} and I am {self.age} years old."\n\n    def is_adult(self):\n        return self.age >= 18\n'})}),"\n",(0,r.jsx)(s.h4,{id:"test",children:(0,r.jsx)(s.strong,{children:"Test:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'from person import Person\n\ndef test_person_greet():\n    person = Person("Alice", 30)\n    assert person.greet() == "Hello, my name is Alice and I am 30 years old."\n\ndef test_person_is_adult():\n    adult = Person("Bob", 25)\n    child = Person("Charlie", 10)\n    assert adult.is_adult() is True\n    assert child.is_adult() is False\n'})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"92-using-fixtures-with-classes",children:(0,r.jsx)(s.strong,{children:"9.2 Using Fixtures with Classes"})}),"\n",(0,r.jsx)(s.p,{children:"Fixtures can create and manage instances of classes for reuse across multiple tests."}),"\n",(0,r.jsx)(s.h4,{id:"example-4",children:(0,r.jsx)(s.strong,{children:"Example:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'import pytest\nfrom person import Person\n\n@pytest.fixture\ndef person_instance():\n    return Person("Diana", 22)\n\ndef test_person_greet_with_fixture(person_instance):\n    assert person_instance.greet() == "Hello, my name is Diana and I am 22 years old."\n'})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"93-testing-inheritance",children:(0,r.jsx)(s.strong,{children:"9.3 Testing Inheritance"})}),"\n",(0,r.jsx)(s.p,{children:"Test whether subclasses correctly extend or override the behavior of parent classes."}),"\n",(0,r.jsx)(s.h4,{id:"example-5",children:(0,r.jsx)(s.strong,{children:"Example:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'# employee.py\nclass Employee(Person):  # Inherits from Person\n    def __init__(self, name, age, employee_id):\n        super().__init__(name, age)\n        self.employee_id = employee_id\n\n    def greet(self):\n        return f"{super().greet()} My employee ID is {self.employee_id}."\n'})}),"\n",(0,r.jsx)(s.h4,{id:"test-1",children:(0,r.jsx)(s.strong,{children:"Test:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'from employee import Employee\n\ndef test_employee_greet():\n    employee = Employee("Eve", 28, "E12345")\n    expected_greeting = "Hello, my name is Eve and I am 28 years old. My employee ID is E12345."\n    assert employee.greet() == expected_greeting\n'})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"94-mocking-dependencies-in-classes",children:(0,r.jsx)(s.strong,{children:"9.4 Mocking Dependencies in Classes"})}),"\n",(0,r.jsx)(s.p,{children:"Mock external dependencies, such as database connections or APIs, when testing class behavior."}),"\n",(0,r.jsx)(s.h4,{id:"example-6",children:(0,r.jsx)(s.strong,{children:"Example:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'from unittest.mock import MagicMock\nfrom payment_gateway import Order, PaymentGateway\n\ndef test_order_checkout():\n    mock_gateway = MagicMock()\n    mock_gateway.process_payment.return_value = {"status": "success", "amount": 100}\n\n    order = Order(mock_gateway)\n    assert order.checkout(100) is True\n    mock_gateway.process_payment.assert_called_once_with(100)\n'})}),"\n",(0,r.jsx)(s.hr,{}),"\n",(0,r.jsx)(s.h3,{id:"95-testing-exceptions-in-classes",children:(0,r.jsx)(s.strong,{children:"9.5 Testing Exceptions in Classes"})}),"\n",(0,r.jsxs)(s.p,{children:["Verify that classes handle exceptions properly using ",(0,r.jsx)(s.code,{children:"pytest.raises"}),"."]}),"\n",(0,r.jsx)(s.h4,{id:"example-7",children:(0,r.jsx)(s.strong,{children:"Example:"})}),"\n",(0,r.jsx)(s.pre,{children:(0,r.jsx)(s.code,{className:"language-python",children:'import pytest\nfrom bank_account import BankAccount\n\ndef test_negative_balance_raises_exception():\n    with pytest.raises(ValueError, match="Balance cannot be negative."):\n        BankAccount(-100)\n'})}),"\n",(0,r.jsx)(s.hr,{})]})}function p(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},19064:(e,s,n)=>{n.d(s,{A:()=>t});const t=n.p+"assets/images/image-28803823dee262dd844b04418d1c1366.png"},28453:(e,s,n)=>{n.d(s,{R:()=>a,x:()=>l});var t=n(96540);const r={},i=t.createContext(r);function a(e){const s=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(i.Provider,{value:s},e.children)}}}]);