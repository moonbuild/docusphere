"use strict";(self.webpackChunkapp_try=self.webpackChunkapp_try||[]).push([[3658],{21085:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>d,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"backend/unittest/code-syntax","title":"Unittest Syntax","description":"1. Basic Test Syntax","source":"@site/docs/backend/unittest/code-syntax.md","sourceDirName":"backend/unittest","slug":"/backend/unittest/code-syntax","permalink":"/docusphere/docs/backend/unittest/code-syntax","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Unittest Syntax","displayed-sidebar":"backend","sidebar_position":3},"sidebar":"backend","previous":{"title":"Installation","permalink":"/docusphere/docs/backend/unittest/Installation"},"next":{"title":"Code Workspace","permalink":"/docusphere/docs/backend/unittest/code-workspace"}}');var i=n(74848),a=n(28453);const r={title:"Unittest Syntax","displayed-sidebar":"backend",sidebar_position:3},l=void 0,d={},c=[{value:"1. <strong>Basic Test Syntax</strong>",id:"1-basic-test-syntax",level:2},{value:"Example:",id:"example",level:4},{value:"<strong>output</strong>:",id:"output",level:4},{value:"2. <strong>Using Fixtures for Setup and Teardown</strong>",id:"2-using-fixtures-for-setup-and-teardown",level:3},{value:"Basic Example:",id:"basic-example",level:4},{value:"3. <strong>Assertions</strong>",id:"3-assertions",level:3},{value:"Common Assertions:",id:"common-assertions",level:4},{value:"4. <strong>Running Tests</strong>",id:"4-running-tests",level:3},{value:"Command-Line Options:",id:"command-line-options",level:4},{value:"5. <strong>Parameterized Testing</strong>",id:"5-parameterized-testing",level:3},{value:"Example:",id:"example-1",level:4},{value:"6. <strong>Organizing and Discovering Tests</strong>",id:"6-organizing-and-discovering-tests",level:3},{value:"Test Structure Example:",id:"test-structure-example",level:4},{value:"7. <strong>Skipping Tests and Expected Failures</strong>",id:"7-skipping-tests-and-expected-failures",level:3},{value:"Skipping a Test:",id:"skipping-a-test",level:4},{value:"Expected Failure:",id:"expected-failure",level:4},{value:"8. <strong>Testing Class-Based OOP Structures</strong>",id:"8-testing-class-based-oop-structures",level:3},{value:"8.1 Testing Classes and Methods",id:"81-testing-classes-and-methods",level:4},{value:"Example:",id:"example-2",level:5},{value:"8.2 Mocking Dependencies in Classes",id:"82-mocking-dependencies-in-classes",level:4},{value:"Example:",id:"example-3",level:5},{value:"8.3 Testing Exceptions in Classes",id:"83-testing-exceptions-in-classes",level:4},{value:"Example:",id:"example-4",level:5}];function o(e){const s={code:"code",h2:"h2",h3:"h3",h4:"h4",h5:"h5",hr:"hr",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(s.h2,{id:"1-basic-test-syntax",children:["1. ",(0,i.jsx)(s.strong,{children:"Basic Test Syntax"})]}),"\n",(0,i.jsxs)(s.p,{children:["To define a test function, create a class that inherits from ",(0,i.jsx)(s.code,{children:"unittest.TestCase"}),". Each test method must start with the prefix ",(0,i.jsx)(s.code,{children:"test_"}),"."]}),"\n",(0,i.jsx)(s.h4,{id:"example",children:"Example:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:"import unittest\n\nclass TestMathOperations(unittest.TestCase):\n    def test_addition(self):\n        self.assertEqual(1 + 1, 2)\n"})}),"\n",(0,i.jsxs)(s.h4,{id:"output",children:[(0,i.jsx)(s.strong,{children:"output"}),":"]}),"\n",(0,i.jsx)(s.p,{children:(0,i.jsx)(s.img,{alt:"alt text",src:n(48669).A+"",width:"1036",height:"166"})}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsxs)(s.h3,{id:"2-using-fixtures-for-setup-and-teardown",children:["2. ",(0,i.jsx)(s.strong,{children:"Using Fixtures for Setup and Teardown"})]}),"\n",(0,i.jsxs)(s.p,{children:["Fixtures in ",(0,i.jsx)(s.code,{children:"unittest"})," are implemented using the ",(0,i.jsx)(s.code,{children:"setUp()"})," and ",(0,i.jsx)(s.code,{children:"tearDown()"})," methods. These methods run before and after each test, respectively."]}),"\n",(0,i.jsx)(s.h4,{id:"basic-example",children:"Basic Example:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:'import unittest\n\nclass TestDatabaseOperations(unittest.TestCase):\n    def setUp(self):\n        self.database = {"user": "admin", "password": "12345"}\n\n    def tearDown(self):\n        self.database.clear()\n\n    def test_database_user(self):\n        self.assertEqual(self.database["user"], "admin")\n'})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:(0,i.jsx)(s.code,{children:"setUp()"})}),": Runs before each test method."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:(0,i.jsx)(s.code,{children:"tearDown()"})}),": Runs after each test method."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:"Shared Resources"}),": Use these methods to initialize or clean up resources."]}),"\n"]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsxs)(s.h3,{id:"3-assertions",children:["3. ",(0,i.jsx)(s.strong,{children:"Assertions"})]}),"\n",(0,i.jsxs)(s.p,{children:["Assertions are crucial for verifying that the code behaves as expected. ",(0,i.jsx)(s.code,{children:"unittest"})," provides a variety of assertion methods."]}),"\n",(0,i.jsx)(s.h4,{id:"common-assertions",children:"Common Assertions:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:'def test_example(self):\n    self.assertEqual(1, 1)                 # Equality assertion\n    self.assertNotEqual(1, 2)             # Inequality assertion\n    self.assertTrue(True)                 # Boolean assertion\n    self.assertFalse(False)               # Boolean assertion\n    self.assertIn("apple", ["apple", "banana"])  # Containment assertion\n    self.assertIsInstance(123, int)       # Type assertion\n'})}),"\n",(0,i.jsxs)(s.h3,{id:"4-running-tests",children:["4. ",(0,i.jsx)(s.strong,{children:"Running Tests"})]}),"\n",(0,i.jsx)(s.p,{children:"To execute tests, use the following command:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"python -m unittest\n"})}),"\n",(0,i.jsx)(s.p,{children:"You can also specify a file or directory:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-bash",children:"python -m unittest test_example.py  # Run tests in a specific file\npython -m unittest discover tests/  # Run tests in a directory\n"})}),"\n",(0,i.jsx)(s.h4,{id:"command-line-options",children:"Command-Line Options:"}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"-v"}),": Verbose output."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"-k <expression>"}),": Run tests matching a specific pattern."]}),"\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.code,{children:"--failfast"}),": Stop after the first failure."]}),"\n"]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsxs)(s.h3,{id:"5-parameterized-testing",children:["5. ",(0,i.jsx)(s.strong,{children:"Parameterized Testing"})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"unittest"})," does not have built-in parameterization like ",(0,i.jsx)(s.code,{children:"pytest"}),", but you can achieve similar functionality using loops or helper functions."]}),"\n",(0,i.jsx)(s.h4,{id:"example-1",children:"Example:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:"import unittest\n\nclass TestAddition(unittest.TestCase):\n    def test_addition(self):\n        test_cases = [\n            (1, 1, 2),\n            (2, 2, 4),\n            (3, 3, 6)\n        ]\n        for input1, input2, expected in test_cases:\n            with self.subTest(input1=input1, input2=input2, expected=expected):\n                self.assertEqual(input1 + input2, expected)\n"})}),"\n",(0,i.jsxs)(s.ul,{children:["\n",(0,i.jsxs)(s.li,{children:[(0,i.jsx)(s.strong,{children:(0,i.jsx)(s.code,{children:"subTest()"})}),": Allows multiple assertions within a single test method without stopping on failure."]}),"\n"]}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsxs)(s.h3,{id:"6-organizing-and-discovering-tests",children:["6. ",(0,i.jsx)(s.strong,{children:"Organizing and Discovering Tests"})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"unittest"})," automatically discovers tests in files named ",(0,i.jsx)(s.code,{children:"test_*.py"})," or ",(0,i.jsx)(s.code,{children:"*_test.py"}),". You can organize tests into directories."]}),"\n",(0,i.jsx)(s.h4,{id:"test-structure-example",children:"Test Structure Example:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{children:"tests/\n    test_basic.py\n    test_advanced.py\n    subdir/\n        test_submodule.py\n"})}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsxs)(s.h3,{id:"7-skipping-tests-and-expected-failures",children:["7. ",(0,i.jsx)(s.strong,{children:"Skipping Tests and Expected Failures"})]}),"\n",(0,i.jsx)(s.p,{children:"You can skip tests or mark them as expected failures using decorators."}),"\n",(0,i.jsx)(s.h4,{id:"skipping-a-test",children:"Skipping a Test:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:'import unittest\n\nclass TestExample(unittest.TestCase):\n    @unittest.skip("This test is not yet implemented.")\n    def test_not_implemented(self):\n        self.fail("This should not run.")\n'})}),"\n",(0,i.jsx)(s.h4,{id:"expected-failure",children:"Expected Failure:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:"import unittest\n\nclass TestExample(unittest.TestCase):\n    @unittest.expectedFailure\n    def test_expected_failure(self):\n        self.assertEqual(1, 2)  # This will be marked as an expected failure\n"})}),"\n",(0,i.jsx)(s.hr,{}),"\n",(0,i.jsxs)(s.h3,{id:"8-testing-class-based-oop-structures",children:["8. ",(0,i.jsx)(s.strong,{children:"Testing Class-Based OOP Structures"})]}),"\n",(0,i.jsxs)(s.p,{children:[(0,i.jsx)(s.code,{children:"unittest"})," supports testing classes and their methods effectively."]}),"\n",(0,i.jsx)(s.h4,{id:"81-testing-classes-and-methods",children:"8.1 Testing Classes and Methods"}),"\n",(0,i.jsx)(s.p,{children:"You can test classes and their methods by creating instances within your tests and verifying their behavior."}),"\n",(0,i.jsx)(s.h5,{id:"example-2",children:"Example:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:'# person.py\nclass Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\n    def greet(self):\n        return f"Hello, my name is {self.name} and I am {self.age} years old."\n\n    def is_adult(self):\n        return self.age >= 18\n\n# test_person.py\nimport unittest\nfrom person import Person\n\nclass TestPerson(unittest.TestCase):\n    def test_person_greet(self):\n        person = Person("Alice", 30)\n        self.assertEqual(person.greet(), "Hello, my name is Alice and I am 30 years old.")\n\n    def test_person_is_adult(self):\n        adult = Person("Bob", 25)\n        child = Person("Charlie", 10)\n        self.assertTrue(adult.is_adult())\n        self.assertFalse(child.is_adult())\n'})}),"\n",(0,i.jsx)(s.h4,{id:"82-mocking-dependencies-in-classes",children:"8.2 Mocking Dependencies in Classes"}),"\n",(0,i.jsx)(s.p,{children:"Mock external dependencies, such as database connections or APIs, when testing class behavior."}),"\n",(0,i.jsx)(s.h5,{id:"example-3",children:"Example:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:'from unittest.mock import MagicMock\nfrom payment_gateway import Order, PaymentGateway\n\nclass TestOrder(unittest.TestCase):\n    def test_order_checkout(self):\n        mock_gateway = MagicMock()\n        mock_gateway.process_payment.return_value = {"status": "success", "amount": 100}\n        order = Order(mock_gateway)\n        self.assertTrue(order.checkout(100))\n        mock_gateway.process_payment.assert_called_once_with(100)\n'})}),"\n",(0,i.jsx)(s.h4,{id:"83-testing-exceptions-in-classes",children:"8.3 Testing Exceptions in Classes"}),"\n",(0,i.jsxs)(s.p,{children:["Verify that classes handle exceptions properly using ",(0,i.jsx)(s.code,{children:"assertRaises"}),"."]}),"\n",(0,i.jsx)(s.h5,{id:"example-4",children:"Example:"}),"\n",(0,i.jsx)(s.pre,{children:(0,i.jsx)(s.code,{className:"language-python",children:'import unittest\nfrom bank_account import BankAccount\n\nclass TestBankAccount(unittest.TestCase):\n    def test_negative_balance_raises_exception(self):\n        with self.assertRaises(ValueError, msg="Balance cannot be negative."):\n            BankAccount(-100)\n'})}),"\n",(0,i.jsx)(s.hr,{})]})}function p(e={}){const{wrapper:s}={...(0,a.R)(),...e.components};return s?(0,i.jsx)(s,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},48669:(e,s,n)=>{n.d(s,{A:()=>t});const t=n.p+"assets/images/image-61413998b3bd8110533e3fd5d90b7cd3.png"},28453:(e,s,n)=>{n.d(s,{R:()=>r,x:()=>l});var t=n(96540);const i={},a=t.createContext(i);function r(e){const s=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function l(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),t.createElement(a.Provider,{value:s},e.children)}}}]);