"use strict";(self.webpackChunkapp_try=self.webpackChunkapp_try||[]).push([[6940],{46079:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"backend/httpx/code-workspace","title":"Code Workspace","description":"Code Overview: Testing an API with httpx and FastAPI","source":"@site/docs/backend/httpx/code-workspace.md","sourceDirName":"backend/httpx","slug":"/backend/httpx/code-workspace","permalink":"/docs/backend/httpx/code-workspace","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"title":"Code Workspace","displayed-sidebar":"backend","sidebar_position":4},"sidebar":"backend","previous":{"title":"HTTPX Syntax","permalink":"/docs/backend/httpx/code-syntax"},"next":{"title":"References","permalink":"/docs/backend/httpx/references"}}');var r=s(74848),i=s(28453);const o={title:"Code Workspace","displayed-sidebar":"backend",sidebar_position:4},a=void 0,c={},d=[{value:"<strong>Code Overview: Testing an API with <code>httpx</code> and <code>FastAPI</code></strong>",id:"code-overview-testing-an-api-with-httpx-and-fastapi",level:3},{value:"<strong>Purpose</strong>",id:"purpose",level:3},{value:"<strong>Key Components</strong>",id:"key-components",level:3},{value:"1. <strong>Imports</strong>",id:"1-imports",level:4},{value:"2. <strong>Constants</strong>",id:"2-constants",level:4},{value:"<strong>Code Overview</strong>",id:"code-overview",level:3},{value:"<strong>1. Registering a User</strong>",id:"1-registering-a-user",level:4},{value:"<strong>2. Login and Token Generation</strong>",id:"2-login-and-token-generation",level:4},{value:"<strong>3. Token Refresh</strong>",id:"3-token-refresh",level:4},{value:"<strong>4. Creating a Note</strong>",id:"4-creating-a-note",level:4},{value:"<strong>5. Fetching All Notes</strong>",id:"5-fetching-all-notes",level:4},{value:"<strong>6. Fetching a Specific Note</strong>",id:"6-fetching-a-specific-note",level:4},{value:"<strong>7. Updating a Note</strong>",id:"7-updating-a-note",level:4},{value:"<strong>8. Deleting a Note</strong>",id:"8-deleting-a-note",level:4},{value:"<strong>Main Test Runner</strong>",id:"main-test-runner",level:3},{value:"<strong>Entry Point</strong>",id:"entry-point",level:3},{value:"<strong>Output</strong>",id:"output",level:3}];function l(e){const n={a:"a",code:"code",h3:"h3",h4:"h4",hr:"hr",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h3,{id:"code-overview-testing-an-api-with-httpx-and-fastapi",children:(0,r.jsxs)(n.strong,{children:["Code Overview: Testing an API with ",(0,r.jsx)(n.code,{children:"httpx"})," and ",(0,r.jsx)(n.code,{children:"FastAPI"})]})}),"\n",(0,r.jsxs)(n.p,{children:["This Python script demonstrates how to write integration tests for a RESTful API using the ",(0,r.jsx)(n.code,{children:"httpx"})," framework and ",(0,r.jsx)(n.code,{children:"FastAPI"}),". It provides a comprehensive example of testing user registration, authentication (login), token refreshing, and CRUD operations on notes."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://github.com/CGS26/Notes_app/tree/main/Backend/tests/httpx",children:(0,r.jsx)(n.img,{src:"https://img.shields.io/badge/GitHub-Refer%20to%20Repo%20for%20Details-blue?logo=github",alt:"Refer to Repo for Details"})})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"purpose",children:(0,r.jsx)(n.strong,{children:"Purpose"})}),"\n",(0,r.jsxs)(n.p,{children:["The purpose of these tests is to validate the functionality of the ",(0,r.jsx)(n.strong,{children:"Notes App API"})," by simulating HTTP requests using the ",(0,r.jsx)(n.code,{children:"httpx"})," library and verifying the responses. These tests cover:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Registering a new user."}),"\n",(0,r.jsx)(n.li,{children:"Logging in and generating access."}),"\n",(0,r.jsx)(n.li,{children:"Refreshing an access token."}),"\n",(0,r.jsx)(n.li,{children:"Creating a new note."}),"\n",(0,r.jsx)(n.li,{children:"Fetching all notes for a user."}),"\n",(0,r.jsx)(n.li,{children:"Retrieving a specific note by its ID."}),"\n",(0,r.jsx)(n.li,{children:"Updating an existing note."}),"\n",(0,r.jsx)(n.li,{children:"Deleting a note."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Each test ensures that the API adheres to expected behavior, including proper status codes, response data, and database interactions."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"key-components",children:(0,r.jsx)(n.strong,{children:"Key Components"})}),"\n",(0,r.jsxs)(n.h4,{id:"1-imports",children:["1. ",(0,r.jsx)(n.strong,{children:"Imports"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:"import asyncio\nimport httpx\nfrom fastapi import status\nfrom schemas.user import UserCreateDTO, RefreshTokenDTO\nfrom schemas.note import NoteCreateDTO\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"asyncio"})}),": Enables asynchronous programming for handling non-blocking I/O operations."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"httpx"})}),"  : A modern HTTP client for making asynchronous HTTP requests."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"status"})})," : Provides HTTP status codes for assertions."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsxs)(n.strong,{children:[(0,r.jsx)(n.code,{children:"UserCreateDTO"}),", ",(0,r.jsx)(n.code,{children:"RefreshTokenDTO"}),", ",(0,r.jsx)(n.code,{children:"NoteCreateDTO"})]}),": Pydantic models used for validating request payloads."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h4,{id:"2-constants",children:["2. ",(0,r.jsx)(n.strong,{children:"Constants"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'BASE_URL = "http://localhost:8000"\nTEST_USER = {\n    "username": "testuser",\n    "password": "testpassword",\n    "full_name": "Test User"\n}\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"BASE_URL"})}),": The base URL of the API being tested."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"TEST_USER"})}),": A dictionary containing test user credentials for registration and login."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"code-overview",children:(0,r.jsx)(n.strong,{children:"Code Overview"})}),"\n",(0,r.jsx)(n.h4,{id:"1-registering-a-user",children:(0,r.jsx)(n.strong,{children:"1. Registering a User"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'async def register_user():\n    """Test user registration."""\n    async with httpx.AsyncClient(base_url=BASE_URL) as client:\n        response = await client.post(\n            "/register/",\n            json=UserCreateDTO(**TEST_USER).dict()\n        )\n        assert response.status_code == status.HTTP_200_OK, f"Failed to register user, got {response.status_code}"\n        assert response.json() == {"message": "User created successfully"}, f"Unexpected response: {response.json()}"\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Purpose"}),": Validates the registration of a new user via a ",(0,r.jsx)(n.code,{children:"POST"})," request."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Key Steps"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Send a ",(0,r.jsx)(n.code,{children:"POST"})," request to ",(0,r.jsx)(n.code,{children:"/register/"})," with valid user data (username, password, and full name)."]}),"\n",(0,r.jsxs)(n.li,{children:["Verify that the response status code is ",(0,r.jsx)(n.code,{children:"200 OK"})," and the message confirms successful user creation (",(0,r.jsx)(n.code,{children:'{"message": "User created successfully"}'}),")."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"2-login-and-token-generation",children:(0,r.jsx)(n.strong,{children:"2. Login and Token Generation"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'async def login_and_get_tokens():\n    """Test user login and token generation."""\n    async with httpx.AsyncClient(base_url=BASE_URL) as client:\n        response = await client.post(\n            "/token/",\n            data={"username": TEST_USER["username"], "password": TEST_USER["password"]}\n        )\n        assert response.status_code == status.HTTP_200_OK, f"Login failed, got {response.status_code}"\n        tokens = response.json()\n        assert "access_token" in tokens, "No access_token found in the response"\n        assert "refresh_token" in tokens, "No refresh_token found in the response"\n        assert tokens["token_type"] == "bearer", "Token type is not \'bearer\'"\n        return tokens\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Purpose"}),": Validates the login process and retrieval of access and refresh tokens."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Key Steps"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Send a ",(0,r.jsx)(n.code,{children:"POST"})," request to ",(0,r.jsx)(n.code,{children:"/token/"})," with valid credentials."]}),"\n",(0,r.jsxs)(n.li,{children:["Verify that the response contains both ",(0,r.jsx)(n.code,{children:"access_token"})," and ",(0,r.jsx)(n.code,{children:"refresh_token"}),", and that the token type is ",(0,r.jsx)(n.code,{children:"bearer"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"3-token-refresh",children:(0,r.jsx)(n.strong,{children:"3. Token Refresh"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'async def refresh_access_token(refresh_token):\n    """Test refreshing an access token."""\n    async with httpx.AsyncClient(base_url=BASE_URL) as client:\n        response = await client.post(\n            "/refresh/",\n            json=RefreshTokenDTO(refresh_token=refresh_token).dict()\n        )\n        assert response.status_code == status.HTTP_200_OK, f"Failed to refresh token, got {response.status_code}"\n        new_tokens = response.json()\n        assert "access_token" in new_tokens, "No new access_token found"\n        assert new_tokens["token_type"] == "bearer", "Token type is not \'bearer\'"\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Purpose"}),": Validates the ability to refresh an access token using a refresh token."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Key Steps"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Use the ",(0,r.jsx)(n.code,{children:"refresh_token"})," obtained during login to send a ",(0,r.jsx)(n.code,{children:"POST"})," request to ",(0,r.jsx)(n.code,{children:"/refresh/"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Verify that the response contains a new ",(0,r.jsx)(n.code,{children:"access_token"})," and that the token type is ",(0,r.jsx)(n.code,{children:"bearer"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"4-creating-a-note",children:(0,r.jsx)(n.strong,{children:"4. Creating a Note"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'async def create_note(client, access_token):\n    """Test creating a note."""\n    print("\\nTesting Create Note...")\n    response = await client.post(\n        "/note/",\n        json=NoteCreateDTO(title="Test Note", body="This is a test note.").dict(),\n        headers=get_headers(access_token)\n    )\n    assert response.status_code == status.HTTP_200_OK, f"Failed to create note, got {response.status_code}"\n    note = response.json()\n    assert "note_id" in note, "Note ID not found in response"\n    print("Create Note Response:", note)\n    return note["note_id"]\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Purpose"}),": Validates the creation of a new note via a ",(0,r.jsx)(n.code,{children:"POST"})," request."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Key Steps"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Send a ",(0,r.jsx)(n.code,{children:"POST"})," request with valid data and authentication headers."]}),"\n",(0,r.jsx)(n.li,{children:"Verify the response status code and payload."}),"\n",(0,r.jsxs)(n.li,{children:["Return the ",(0,r.jsx)(n.code,{children:"note_id"})," for further testing."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"5-fetching-all-notes",children:(0,r.jsx)(n.strong,{children:"5. Fetching All Notes"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'async def get_all_notes(client, access_token):\n    """Test fetching all notes."""\n    print("\\nTesting Get All Notes...")\n    response = await client.get("/note/all", headers=get_headers(access_token))\n    assert response.status_code == status.HTTP_200_OK, f"Failed to fetch notes, got {response.status_code}"\n    notes = response.json()\n    print("Get All Notes Response:", notes)\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Purpose"}),": Validates fetching all notes for an authenticated user via a ",(0,r.jsx)(n.code,{children:"GET"})," request."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Key Steps"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Send a ",(0,r.jsx)(n.code,{children:"GET"})," request to ",(0,r.jsx)(n.code,{children:"/note/all"})," with authentication headers."]}),"\n",(0,r.jsx)(n.li,{children:"Verify the response contains the correct number of notes and their details."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"6-fetching-a-specific-note",children:(0,r.jsx)(n.strong,{children:"6. Fetching a Specific Note"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'async def get_note_by_id(client, access_token, note_id):\n    """Test fetching a specific note by ID."""\n    print("\\nTesting Get Note by ID...")\n    response = await client.get(f"/note/{note_id}", headers=get_headers(access_token))\n    assert response.status_code == status.HTTP_200_OK, f"Failed to fetch note, got {response.status_code}"\n    note = response.json()\n    print("Get Note Response:", note)\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Purpose"}),": Validates fetching a specific note by its ID via a ",(0,r.jsx)(n.code,{children:"GET"})," request."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Key Steps"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Send a ",(0,r.jsx)(n.code,{children:"GET"})," request with the note's ID and authentication headers."]}),"\n",(0,r.jsx)(n.li,{children:"Verify the response contains the correct note details."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"7-updating-a-note",children:(0,r.jsx)(n.strong,{children:"7. Updating a Note"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'async def update_note(client, access_token, note_id):\n    """Test updating a note."""\n    print("\\nTesting Update Note...")\n    response = await client.put(\n        f"/note/{note_id}",\n        json=NoteCreateDTO(title="Updated Title", body="Updated body.").dict(),\n        headers=get_headers(access_token)\n    )\n    assert response.status_code == status.HTTP_200_OK, f"Failed to update note, got {response.status_code}"\n    updated_note = response.json()\n    print("Update Note Response:", updated_note)\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Purpose"}),": Validates updating an existing note via a ",(0,r.jsx)(n.code,{children:"PUT"})," request."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Key Steps"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Send a ",(0,r.jsx)(n.code,{children:"PUT"})," request with updated data and authentication headers."]}),"\n",(0,r.jsx)(n.li,{children:"Verify the response reflects the updated details."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"8-deleting-a-note",children:(0,r.jsx)(n.strong,{children:"8. Deleting a Note"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'async def delete_note(client, access_token, note_id):\n    """Test deleting a note."""\n    print("\\nTesting Delete Note...")\n    response = await client.delete(f"/note/{note_id}", headers=get_headers(access_token))\n    assert response.status_code == status.HTTP_204_NO_CONTENT, f"Failed to delete note, got {response.status_code}"\n    print("Delete Note Response:", response.text)\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Purpose"}),": Validates deleting a note via a ",(0,r.jsx)(n.code,{children:"DELETE"})," request."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Key Steps"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Send a ",(0,r.jsx)(n.code,{children:"DELETE"})," request with the note's ID and authentication headers."]}),"\n",(0,r.jsx)(n.li,{children:"Verify the response status code and that the note no longer exists in the database."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"main-test-runner",children:(0,r.jsx)(n.strong,{children:"Main Test Runner"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'async def run_tests():\n    """Run all tests sequentially."""\n    try:\n        await register_user()\n        tokens = await login_and_get_tokens()\n        access_token = tokens["access_token"]\n        await refresh_access_token(tokens["refresh_token"])\n        async with httpx.AsyncClient(base_url=BASE_URL) as client:\n            note_id = await create_note(client, access_token)\n            await get_all_notes(client, access_token)\n            await get_note_by_id(client, access_token, note_id)\n            await update_note(client, access_token, note_id)\n            await delete_note(client, access_token, note_id)\n        print("\\nAll tests passed!")\n    except AssertionError as e:\n        print(f"Test failed: {e}")\n    except Exception as e:\n        print(f"An error occurred: {str(e)}")\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Purpose"}),": Orchestrates the execution of all test functions in sequence."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Key Features"}),":","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Handles exceptions and prints appropriate error messages."}),"\n",(0,r.jsx)(n.li,{children:"Ensures tests are executed in a logical order."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"entry-point",children:(0,r.jsx)(n.strong,{children:"Entry Point"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'if __name__ == "__main__":\n    asyncio.run(run_tests())\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Executes the ",(0,r.jsx)(n.code,{children:"run_tests"})," function when the script is run directly."]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"output",children:(0,r.jsx)(n.strong,{children:"Output"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"alt text",src:s(39626).A+"",width:"1280",height:"454"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},39626:(e,n,s)=>{s.d(n,{A:()=>t});const t=s.p+"assets/images/output-2674456d68794f94c0e46259d7061738.gif"},28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>a});var t=s(96540);const r={},i=t.createContext(r);function o(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);