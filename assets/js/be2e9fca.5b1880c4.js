"use strict";(self.webpackChunkapp_try=self.webpackChunkapp_try||[]).push([[5714],{42141:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>a,frontMatter:()=>l,metadata:()=>s,toc:()=>o});const s=JSON.parse('{"id":"frontend/Jester/code-syntax","title":"Syntax and functions","description":"General Syntax","source":"@site/docs/frontend/4. Jester/code-syntax.md","sourceDirName":"frontend/4. Jester","slug":"/frontend/Jester/code-syntax","permalink":"/docusphere/docs/frontend/Jester/code-syntax","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"title":"Syntax and functions","displayed-sidebar":"frontend","sidebar_position":3},"sidebar":"frontend","previous":{"title":"Jest Installation","permalink":"/docusphere/docs/frontend/Jester/Jest-Installation"},"next":{"title":"Code Workspace","permalink":"/docusphere/docs/frontend/Jester/code-workspace"}}');var i=n(74848),r=n(28453);const l={title:"Syntax and functions","displayed-sidebar":"frontend",sidebar_position:3},c="Jest Syntax for Testing TypeScript",d={},o=[{value:"General Syntax",id:"general-syntax",level:2},{value:"Alternative Syntax",id:"alternative-syntax",level:2},{value:"Example Usage",id:"example-usage",level:2},{value:"1\ufe0f\u20e3 Matchers for Primitive Data Types (Numbers, Strings, Booleans, etc.)",id:"1\ufe0f\u20e3-matchers-for-primitive-data-types-numbers-strings-booleans-etc",level:3},{value:"2\ufe0f\u20e3 Matchers for Non-Primitive Data Types (Objects, Arrays, Functions, etc.)",id:"2\ufe0f\u20e3-matchers-for-non-primitive-data-types-objects-arrays-functions-etc",level:3},{value:"3\ufe0f\u20e3 Matchers for Functions &amp; Asynchronous Code",id:"3\ufe0f\u20e3-matchers-for-functions--asynchronous-code",level:3},{value:"4\ufe0f\u20e3 Utility Matchers",id:"4\ufe0f\u20e3-utility-matchers",level:3},{value:"Other Functions:",id:"other-functions",level:2},{value:"Jest <code>.todo()</code>, <code>.skip()</code>, and <code>.only()</code>",id:"jest-todo-skip-and-only",level:3},{value:"Getting Elements in Jest Tests",id:"getting-elements-in-jest-tests",level:2},{value:"List of <code>getBy</code> Functions",id:"list-of-getby-functions",level:3},{value:"Example 1: Testing a Button with <code>getByText</code>",id:"example-1-testing-a-button-with-getbytext",level:3},{value:"Example 2: Testing a Button with <code>getByPlaceholderText</code>",id:"example-2-testing-a-button-with-getbyplaceholdertext",level:3},{value:"Using <code>getAllBy</code> Functions in Jest Tests",id:"using-getallby-functions-in-jest-tests",level:2},{value:"List of <code>getAllBy</code> Functions",id:"list-of-getallby-functions",level:3},{value:"Example 1: Testing Multiple List Items with <code>getAllByText</code>",id:"example-1-testing-multiple-list-items-with-getallbytext",level:3},{value:"Example 2: Testing Multiple Buttons with <code>getAllByRole</code>",id:"example-2-testing-multiple-buttons-with-getallbyrole",level:3}];function h(e){const t={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.header,{children:(0,i.jsx)(t.h1,{id:"jest-syntax-for-testing-typescript",children:"Jest Syntax for Testing TypeScript"})}),"\n",(0,i.jsx)(t.h2,{id:"general-syntax",children:"General Syntax"}),"\n",(0,i.jsx)(t.p,{children:"Jest tests in TypeScript typically follow this structure:"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:'// Import the function/module to be tested\nimport { functionToTest } from "./module";\n\n// Define a test suite using `describe`\ndescribe("Test Suite Name", () => {\n    \n    // Define individual test cases using `test` or `it`\n    test("should return expected output", () => {\n        \n        // Arrange: Set up the input and expected output\n        const input = 5;\n        const expectedOutput = 25;\n\n        // Act: Call the function\n        const result = functionToTest(input);\n\n        // Assert: Check if the output matches expectation\n        expect(result).toBe(expectedOutput);\n    });\n});\n'})}),"\n",(0,i.jsx)(t.h2,{id:"alternative-syntax",children:"Alternative Syntax"}),"\n",(0,i.jsxs)(t.p,{children:["In the alternative syntax, you can directly assign the function to a ",(0,i.jsx)(t.code,{children:"const"})," and then use it when testing the function. You can pass the arguments of the function along with the ",(0,i.jsx)(t.code,{children:"const"}),"."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-ts",children:'// Import the function/module to be tested\nimport { functionToTest } from "./module";\n\n// Define a test suite using `describe`\ndescribe("Test Suite Name", () => {\n    \n    // Define individual test cases using `test` or `it`\n    test("should return expected output", () => {\n        \n        // Arrange: Set up the const\'s\n        const x = functionToTest;\n        const y = x(\'Argument 1\'.\'Arguement-2\',.....);\n        \n        // Test if the function performs properly\n        expect(y).toBe(expectedOutput);\n    });\n});\n'})}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h2,{id:"example-usage",children:"Example Usage"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-typescript",children:"describe('Jest Test Methods', () => {\n  test.todo('should implement this test later');\n\n  test.skip('this test is temporarily skipped', () => {\n    expect(2 + 2).toBe(4);\n  });\n\n  test.only('this is the only test that runs', () => {\n    expect(3 + 3).toBe(6);\n  });\n});\n"})}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h1,{id:"functions-in-jester",children:"Functions in Jester"}),"\n",(0,i.jsx)(t.h3,{id:"1\ufe0f\u20e3-matchers-for-primitive-data-types-numbers-strings-booleans-etc",children:"1\ufe0f\u20e3 Matchers for Primitive Data Types (Numbers, Strings, Booleans, etc.)"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Matcher"}),(0,i.jsx)(t.th,{children:"Definition"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"toBe(value)"})}),(0,i.jsxs)(t.td,{children:["Strict equality comparison (like ",(0,i.jsx)(t.code,{children:"==="}),")."]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"toEqual(value)"})}),(0,i.jsx)(t.td,{children:"Deep equality check (also works for objects/arrays)."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"toBeTruthy()"})}),(0,i.jsx)(t.td,{children:"Passes if the value is truthy."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"toBeFalsy()"})}),(0,i.jsx)(t.td,{children:"Passes if the value is falsy."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"toBeNull()"})}),(0,i.jsxs)(t.td,{children:["Passes if the value is ",(0,i.jsx)(t.code,{children:"null"}),"."]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"toBeUndefined()"})}),(0,i.jsxs)(t.td,{children:["Passes if the value is ",(0,i.jsx)(t.code,{children:"undefined"}),"."]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"toBeDefined()"})}),(0,i.jsxs)(t.td,{children:["Passes if the value is ",(0,i.jsx)(t.strong,{children:"not"})," ",(0,i.jsx)(t.code,{children:"undefined"}),"."]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"toBeNaN()"})}),(0,i.jsxs)(t.td,{children:["Passes if the value is ",(0,i.jsx)(t.code,{children:"NaN"}),"."]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"toMatch(regex)"})}),(0,i.jsx)(t.td,{children:"Checks if a string matches a regex pattern."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"toContain(string)"})}),(0,i.jsx)(t.td,{children:"Checks if a string contains a substring."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"toHaveLength(number)"})}),(0,i.jsx)(t.td,{children:"Checks if a string/array has a specific length."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"toBeGreaterThan(num)"})}),(0,i.jsx)(t.td,{children:"Checks if a number is greater than the given value."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"toBeGreaterThanOrEqual(num)"})}),(0,i.jsx)(t.td,{children:"Checks if a number is greater than or equal to the given value."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"toBeLessThan(num)"})}),(0,i.jsx)(t.td,{children:"Checks if a number is less than the given value."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"toBeLessThanOrEqual(num)"})}),(0,i.jsx)(t.td,{children:"Checks if a number is less than or equal to the given value."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"toBeCloseTo(num, precision?)"})}),(0,i.jsx)(t.td,{children:"Compares floating-point numbers within a precision."})]})]})]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h3,{id:"2\ufe0f\u20e3-matchers-for-non-primitive-data-types-objects-arrays-functions-etc",children:"2\ufe0f\u20e3 Matchers for Non-Primitive Data Types (Objects, Arrays, Functions, etc.)"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Matcher"}),(0,i.jsx)(t.th,{children:"Definition"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"toEqual(value)"})}),(0,i.jsx)(t.td,{children:"Deep equality check for objects/arrays."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"toStrictEqual(value)"})}),(0,i.jsxs)(t.td,{children:["Like ",(0,i.jsx)(t.code,{children:"toEqual()"}),", but also checks object types."]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"toContain(item)"})}),(0,i.jsx)(t.td,{children:"Checks if an array contains a specific element."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"toContainEqual(object)"})}),(0,i.jsx)(t.td,{children:"Checks if an array contains an object that deeply equals the given object."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"toHaveProperty(key, value?)"})}),(0,i.jsx)(t.td,{children:"Checks if an object has a specific property (optional value check)."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"toBeInstanceOf(Class)"})}),(0,i.jsx)(t.td,{children:"Checks if an object is an instance of a class."})]})]})]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h3,{id:"3\ufe0f\u20e3-matchers-for-functions--asynchronous-code",children:"3\ufe0f\u20e3 Matchers for Functions & Asynchronous Code"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Matcher"}),(0,i.jsx)(t.th,{children:"Definition"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"toThrow(error?)"})}),(0,i.jsx)(t.td,{children:"Expects a function to throw an error."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"toThrowErrorMatchingSnapshot()"})}),(0,i.jsx)(t.td,{children:"Expects a function to throw an error and match a stored snapshot."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"resolves.toBe(value)"})}),(0,i.jsx)(t.td,{children:"For promises, checks if resolved value matches expected."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"resolves.toEqual(value)"})}),(0,i.jsx)(t.td,{children:"For promises, checks deep equality of resolved value."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"rejects.toThrow(error?)"})}),(0,i.jsx)(t.td,{children:"For promises, checks if rejected with an error."})]})]})]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h3,{id:"4\ufe0f\u20e3-utility-matchers",children:"4\ufe0f\u20e3 Utility Matchers"}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Matcher"}),(0,i.jsx)(t.th,{children:"Definition"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"expect.any(Class)"})}),(0,i.jsxs)(t.td,{children:["Passes if value is ",(0,i.jsx)(t.strong,{children:"any instance"})," of the given class."]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"expect.anything()"})}),(0,i.jsxs)(t.td,{children:["Passes if value is ",(0,i.jsxs)(t.strong,{children:["not ",(0,i.jsx)(t.code,{children:"null"})," or ",(0,i.jsx)(t.code,{children:"undefined"})]}),"."]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"expect.arrayContaining(array)"})}),(0,i.jsx)(t.td,{children:"Checks if an array contains a subset of elements."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"expect.objectContaining(object)"})}),(0,i.jsx)(t.td,{children:"Checks if an object contains the given properties."})]})]})]}),"\n",(0,i.jsx)(t.h2,{id:"other-functions",children:"Other Functions:"}),"\n",(0,i.jsxs)(t.h3,{id:"jest-todo-skip-and-only",children:["Jest ",(0,i.jsx)(t.code,{children:".todo()"}),", ",(0,i.jsx)(t.code,{children:".skip()"}),", and ",(0,i.jsx)(t.code,{children:".only()"})]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:(0,i.jsx)(t.code,{children:".todo()"})}),": Marks a test as a placeholder for future implementation."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:(0,i.jsx)(t.code,{children:".skip()"})}),": Skips a test so it won't run."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.strong,{children:(0,i.jsx)(t.code,{children:".only()"})}),": Runs only the specified test, ignoring others."]}),"\n"]}),"\n",(0,i.jsx)(t.h2,{id:"getting-elements-in-jest-tests",children:"Getting Elements in Jest Tests"}),"\n",(0,i.jsxs)(t.p,{children:["In Jest tests (using React Testing Library), we retrieve elements using various ",(0,i.jsx)(t.code,{children:"getBy"})," functions. These functions help in querying the DOM to ensure the component renders correctly."]}),"\n",(0,i.jsxs)(t.h3,{id:"list-of-getby-functions",children:["List of ",(0,i.jsx)(t.code,{children:"getBy"})," Functions"]}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Function"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"getByText"})}),(0,i.jsx)(t.td,{children:"Selects an element by its visible text."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"getByRole"})}),(0,i.jsx)(t.td,{children:"Finds an element by its ARIA role."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"getByLabelText"})}),(0,i.jsx)(t.td,{children:"Selects an element by its associated label text."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"getByPlaceholderText"})}),(0,i.jsx)(t.td,{children:"Finds an input field by its placeholder text."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"getByAltText"})}),(0,i.jsxs)(t.td,{children:["Selects an element by its ",(0,i.jsx)(t.code,{children:"alt"})," attribute (commonly for images)."]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"getByDisplayValue"})}),(0,i.jsx)(t.td,{children:"Finds an input element by its current value."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"getByTestId"})}),(0,i.jsxs)(t.td,{children:["Finds an element by a custom ",(0,i.jsx)(t.code,{children:"data-testid"})," attribute."]})]})]})]}),"\n",(0,i.jsxs)(t.h3,{id:"example-1-testing-a-button-with-getbytext",children:["Example 1: Testing a Button with ",(0,i.jsx)(t.code,{children:"getByText"})]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",children:'import { render, screen } from "@testing-library/react";\nimport userEvent from "@testing-library/user-event";\nimport MyComponent from "./MyComponent";\n\ntest("renders button and clicks it", async () => {\n  // Render the component inside the virtual DOM\n  render(<MyComponent />);\n  \n  // Find the button element by its text content ("Click Me")\n  const button = screen.getByText("Click Me");\n\n  // Simulate a user clicking the button\n  await userEvent.click(button);\n  \n  // Assert that after clicking, the button\'s text changes to "Clicked!"\n  expect(button).toHaveTextContent("Clicked!");\n});\n'})}),"\n",(0,i.jsxs)(t.h3,{id:"example-2-testing-a-button-with-getbyplaceholdertext",children:["Example 2: Testing a Button with ",(0,i.jsx)(t.code,{children:"getByPlaceholderText"})]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",children:'import { render, screen } from "@testing-library/react";\n\ntest("renders input with placeholder", () => {\n  // Render an input element with a placeholder text\n  render(<input placeholder="Enter name" />);\n  \n  // Find the input element using its placeholder text\n  const input = screen.getByPlaceholderText("Enter name");\n\n  // Assert that the input element is present in the document\n  expect(input).toBeInTheDocument();\n});\n\n'})}),"\n",(0,i.jsx)(t.p,{children:"These getBy functions help in selecting elements efficiently for testing in Jest with React Testing Library."}),"\n",(0,i.jsxs)(t.h2,{id:"using-getallby-functions-in-jest-tests",children:["Using ",(0,i.jsx)(t.code,{children:"getAllBy"})," Functions in Jest Tests"]}),"\n",(0,i.jsxs)(t.p,{children:["The ",(0,i.jsx)(t.code,{children:"getAllBy"})," functions in React Testing Library are used to select ",(0,i.jsx)(t.strong,{children:"multiple elements"})," that match a given query. Unlike ",(0,i.jsx)(t.code,{children:"getBy"}),", which returns only one element, ",(0,i.jsx)(t.code,{children:"getAllBy"})," returns an ",(0,i.jsx)(t.strong,{children:"array"})," of matching elements."]}),"\n",(0,i.jsxs)(t.h3,{id:"list-of-getallby-functions",children:["List of ",(0,i.jsx)(t.code,{children:"getAllBy"})," Functions"]}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{children:"Function"}),(0,i.jsx)(t.th,{children:"Description"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"getAllByText"})}),(0,i.jsx)(t.td,{children:"Selects all elements that match the given text."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"getAllByRole"})}),(0,i.jsx)(t.td,{children:"Finds all elements that match a given ARIA role."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"getAllByLabelText"})}),(0,i.jsx)(t.td,{children:"Selects all elements associated with a label."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"getAllByPlaceholderText"})}),(0,i.jsx)(t.td,{children:"Finds all input fields with a matching placeholder."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"getAllByAltText"})}),(0,i.jsxs)(t.td,{children:["Selects all elements that match the given ",(0,i.jsx)(t.code,{children:"alt"})," attribute."]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"getAllByDisplayValue"})}),(0,i.jsx)(t.td,{children:"Finds all input elements that match a given value."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{children:(0,i.jsx)(t.code,{children:"getAllByTestId"})}),(0,i.jsxs)(t.td,{children:["Finds all elements with a custom ",(0,i.jsx)(t.code,{children:"data-testid"})," attribute."]})]})]})]}),"\n",(0,i.jsxs)(t.h3,{id:"example-1-testing-multiple-list-items-with-getallbytext",children:["Example 1: Testing Multiple List Items with ",(0,i.jsx)(t.code,{children:"getAllByText"})]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",children:'import { render, screen } from "@testing-library/react";\n\ntest("renders multiple list items", () => {\n  // Render a list of items\n  render(\n    <ul>\n      <li>Item 1</li>\n      <li>Item 2</li>\n      <li>Item 3</li>\n    </ul>\n  );\n\n  // Get all list items that contain "Item"\n  const items = screen.getAllByText(/Item/);\n\n  // Assert that there are exactly 3 matching elements\n  expect(items.length).toBe(3);\n});\n'})}),"\n",(0,i.jsxs)(t.h3,{id:"example-2-testing-multiple-buttons-with-getallbyrole",children:["Example 2: Testing Multiple Buttons with ",(0,i.jsx)(t.code,{children:"getAllByRole"})]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-tsx",children:'import { render, screen } from "@testing-library/react";\n\ntest("renders multiple buttons", () => {\n  // Render multiple buttons inside a div\n  render(\n    <div>\n      <button>Save</button>\n      <button>Cancel</button>\n      <button>Delete</button>\n    </div>\n  );\n\n  // Get all buttons by their role\n  const buttons = screen.getAllByRole("button");\n\n  // Assert that exactly 3 buttons are found\n  expect(buttons.length).toBe(3);\n\n  // Assert that the first button has the text "Save"\n  expect(buttons[0]).toHaveTextContent("Save");\n});\n'})})]})}function a(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>c});var s=n(96540);const i={},r=s.createContext(i);function l(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);