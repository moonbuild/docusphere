"use strict";(self.webpackChunkapp_try=self.webpackChunkapp_try||[]).push([[3094],{35255:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>a});const i=JSON.parse('{"id":"frontend/Vitest/code-workspace","title":"Code Workspace","description":"A guide to testing the NotesCardView component using Vitest and @testing-library/react.","source":"@site/docs/frontend/2. Vitest/code-workspace.mdx","sourceDirName":"frontend/2. Vitest","slug":"/frontend/Vitest/code-workspace","permalink":"/docusphere/docs/frontend/Vitest/code-workspace","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"title":"Code Workspace","description":"A guide to testing the NotesCardView component using Vitest and @testing-library/react.","displayed-sidebar":"frontend","sidebar_position":4,"authors":["tanishq"]},"sidebar":"frontend","previous":{"title":"Code Syntax","permalink":"/docusphere/docs/frontend/vitest/code-syntax"},"next":{"title":"Testing Tanstack Query","permalink":"/docusphere/docs/frontend/Vitest/testing-react-query"}}');var o=n(74848),s=n(28453);const r={title:"Code Workspace",description:"A guide to testing the NotesCardView component using Vitest and @testing-library/react.","displayed-sidebar":"frontend",sidebar_position:4,authors:["tanishq"]},c=void 0,d={},a=[{value:"Overview",id:"overview",level:2},{value:"Test Cases",id:"test-cases",level:2},{value:"1. Rendering Notes in Card View",id:"1-rendering-notes-in-card-view",level:3},{value:"2. Clicking on View Button Triggers <code>onView</code> Callback",id:"2-clicking-on-view-button-triggers-onview-callback",level:3},{value:"3. Clicking on Edit Button Triggers <code>onEdit</code> Callback",id:"3-clicking-on-edit-button-triggers-onedit-callback",level:3},{value:"4. Clicking on Delete Button Opens Confirmation Dialog",id:"4-clicking-on-delete-button-opens-confirmation-dialog",level:3},{value:"5. Confirming Delete Triggers the Delete Mutation",id:"5-confirming-delete-triggers-the-delete-mutation",level:3},{value:"\ud83d\udccc GitHub Repository",id:"-github-repository",level:3}];function l(e){const t={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",hr:"hr",img:"img",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h2,{id:"overview",children:"Overview"}),"\n",(0,o.jsxs)(t.p,{children:["This document provides an in-depth explanation of test cases written for the ",(0,o.jsx)(t.code,{children:"NotesCardView"})," component using ",(0,o.jsx)(t.strong,{children:"Vitest"})," and ",(0,o.jsx)(t.strong,{children:"@testing-library/react"}),". It covers rendering verification, button interactions, and mutation handling."]}),"\n",(0,o.jsx)(t.admonition,{type:"info",children:(0,o.jsxs)(t.p,{children:["Know more about ",(0,o.jsx)(t.a,{href:"/docusphere/docs/frontend/react-testing-library",children:"React Testing Library"}),"."]})}),"\n",(0,o.jsx)(t.p,{children:"For more test cases and implementation details, check out the complete repository:"}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.a,{href:"https://github.com/tanishq-cloud/Notty",children:(0,o.jsx)(t.img,{src:"https://img.shields.io/badge/View%20on-GitHub-blue?logo=github",alt:"GitHub"})})}),"\n",(0,o.jsx)(t.hr,{}),"\n",(0,o.jsx)(t.h2,{id:"test-cases",children:"Test Cases"}),"\n",(0,o.jsx)(t.h3,{id:"1-rendering-notes-in-card-view",children:"1. Rendering Notes in Card View"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",children:'it("renders notes in card view", async () => {\n  render(<NotesCardView notes={mockUseNotes.notes} onView={vi.fn()} onEdit={vi.fn()} />);\n  expect(screen.getByText("Note: Test Note")).toBeInTheDocument();\n  expect(screen.getByText("Note: Another Test Note")).toBeInTheDocument();\n});\n'})}),"\n",(0,o.jsxs)(t.p,{children:["\u2705 ",(0,o.jsx)(t.strong,{children:"Ensures that notes are correctly displayed in the component."})]}),"\n",(0,o.jsx)(t.hr,{}),"\n",(0,o.jsxs)(t.h3,{id:"2-clicking-on-view-button-triggers-onview-callback",children:["2. Clicking on View Button Triggers ",(0,o.jsx)(t.code,{children:"onView"})," Callback"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",children:'it("clicking on view button triggers onView callback", async () => {\n  const onViewMock = vi.fn();\n  render(<NotesCardView notes={mockUseNotes.notes} onView={onViewMock} onEdit={vi.fn()} />);\n\n  const viewButtons = screen.getAllByTestId("view-button");\n  await userEvent.click(viewButtons[0]);\n\n  await waitFor(() => {\n    expect(onViewMock).toHaveBeenCalledWith(mockUseNotes.notes[0]);\n  });\n});\n'})}),"\n",(0,o.jsxs)(t.p,{children:["\u2705 ",(0,o.jsxs)(t.strong,{children:["Verifies that the correct note is passed to the ",(0,o.jsx)(t.code,{children:"onView"})," callback when clicked."]})]}),"\n",(0,o.jsx)(t.hr,{}),"\n",(0,o.jsxs)(t.h3,{id:"3-clicking-on-edit-button-triggers-onedit-callback",children:["3. Clicking on Edit Button Triggers ",(0,o.jsx)(t.code,{children:"onEdit"})," Callback"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",children:'it("clicking on edit button triggers onEdit callback", async () => {\n  const onEditMock = vi.fn();\n  render(<NotesCardView notes={mockUseNotes.notes} onView={vi.fn()} onEdit={onEditMock} />);\n\n  const editButtons = screen.getAllByRole("button", { name: /edit/i });\n  await userEvent.click(editButtons[0]);\n\n  await waitFor(() => {\n    expect(onEditMock).toHaveBeenCalledWith(mockUseNotes.notes[0]);\n  });\n});\n'})}),"\n",(0,o.jsxs)(t.p,{children:["\u2705 ",(0,o.jsxs)(t.strong,{children:["Confirms that the ",(0,o.jsx)(t.code,{children:"onEdit"})," callback receives the correct note when clicked."]})]}),"\n",(0,o.jsx)(t.hr,{}),"\n",(0,o.jsx)(t.h3,{id:"4-clicking-on-delete-button-opens-confirmation-dialog",children:"4. Clicking on Delete Button Opens Confirmation Dialog"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",children:'it("clicking on delete button opens the delete confirmation dialog", async () => {\n  render(<NotesCardView notes={mockUseNotes.notes} onView={vi.fn()} onEdit={vi.fn()} />);\n\n  const deleteButtons = screen.getAllByTestId("delete-button");\n  await userEvent.click(deleteButtons[0]);\n\n  expect(screen.getByText(/Are you sure\\?/)).toBeInTheDocument();\n});\n'})}),"\n",(0,o.jsxs)(t.p,{children:["\u2705 ",(0,o.jsx)(t.strong,{children:"Ensures that a confirmation dialog appears when the delete button is clicked."})]}),"\n",(0,o.jsx)(t.hr,{}),"\n",(0,o.jsx)(t.h3,{id:"5-confirming-delete-triggers-the-delete-mutation",children:"5. Confirming Delete Triggers the Delete Mutation"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",children:'it("confirming delete triggers the delete mutation", async () => {\n  render(<NotesCardView notes={mockUseNotes.notes} onView={vi.fn()} onEdit={vi.fn()} />);\n\n  const deleteButtons = screen.getAllByTestId("delete-button");\n  await userEvent.click(deleteButtons[0]);\n  \n  await userEvent.click(screen.getByRole("button", { name: /Delete/i }));\n\n  await waitFor(() => {\n    expect(mockUseNotes.deleteMutation.mutate).toHaveBeenCalledWith(mockUseNotes.notes[0].note_id);\n  });\n});\n'})}),"\n",(0,o.jsxs)(t.p,{children:["\u2705 ",(0,o.jsx)(t.strong,{children:"Verifies that the correct note ID is passed to the delete mutation."})]}),"\n",(0,o.jsx)(t.hr,{}),"\n",(0,o.jsx)(t.h3,{id:"-github-repository",children:"\ud83d\udccc GitHub Repository"}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsxs)(t.strong,{children:["For additional test cases and updates, visit the ",(0,o.jsx)(t.a,{href:"https://github.com/tanishq-cloud/Notty",children:"GitHub repository"}),"."]})})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>c});var i=n(96540);const o={},s=i.createContext(o);function r(e){const t=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),i.createElement(s.Provider,{value:t},e.children)}}}]);